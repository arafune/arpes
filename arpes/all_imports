__init__.py:from __future__ import annotations
__init__.py:import warnings
__init__.py:                import pyqtgraph
__init__.py:            import igor
__init__.py:            import bokeh
__init__.py:    from colorama import Fore, Style
_typing.py:from __future__ import annotations
_typing.py:import uuid
_typing.py:from typing import TYPE_CHECKING, Literal, Required, TypeAlias, TypedDict, TypeVar
_typing.py:import xarray as xr
_typing.py:    from collections.abc import Callable, Sequence
_typing.py:    from pathlib import Path
_typing.py:    import matplotlib as mpl
_typing.py:    import numpy as np
_typing.py:    from _typeshed import Incomplete
_typing.py:    from matplotlib.artist import Artist
_typing.py:    from matplotlib.axes import Axes
_typing.py:    from matplotlib.backend_bases import Event
_typing.py:    from matplotlib.colors import Colormap, Normalize
_typing.py:    from matplotlib.figure import Figure
_typing.py:    from matplotlib.patches import Patch
_typing.py:    from matplotlib.patheffects import AbstractPathEffect
_typing.py:    from matplotlib.transforms import BboxBase, Transform
_typing.py:    from matplotlib.typing import (
_typing.py:    from numpy.typing import ArrayLike, NDArray
analysis/__init__.py:from __future__ import annotations
analysis/__init__.py:from .band_analysis import fit_bands, fit_for_effective_mass
analysis/__init__.py:from .band_analysis_utils import param_getter, param_stderr_getter
analysis/__init__.py:from .decomposition import (
analysis/__init__.py:from .deconvolution import deconvolve_ice, deconvolve_rl, make_psf1d
analysis/__init__.py:from .derivative import curvature1d, curvature2d, d1_along_axis, d2_along_axis, minimum_gradient
analysis/__init__.py:from .filters import boxcar_filter, boxcar_filter_arr, gaussian_filter, gaussian_filter_arr
analysis/__init__.py:from .gap import determine_broadened_fermi_distribution, normalize_by_fermi_dirac, symmetrize
analysis/__init__.py:from .general import (
analysis/__init__.py:from .kfermi import kfermi_from_mdcs
analysis/__init__.py:from .mask import apply_mask, apply_mask_to_coords, polys_to_mask, raw_poly_to_mask
analysis/__init__.py:from .pocket import (
analysis/__init__.py:from .tarpes import normalized_relative_change, relative_change
analysis/__init__.py:from .xps import approximate_core_levels
analysis/align.py:from __future__ import annotations
analysis/align.py:import numpy as np
analysis/align.py:import xarray as xr
analysis/align.py:from scipy import signal
analysis/align.py:from arpes.fits.fit_models import QuadraticModel
analysis/background.py:from __future__ import annotations
analysis/background.py:from itertools import pairwise
analysis/background.py:from typing import TYPE_CHECKING
analysis/background.py:import numpy as np
analysis/background.py:import xarray as xr
analysis/background.py:from scipy.interpolate import interp1d
analysis/background.py:from scipy.spatial import ConvexHull
analysis/background.py:    from arpes._typing import DataType
analysis/band_analysis.py:from __future__ import annotations
analysis/band_analysis.py:import contextlib
analysis/band_analysis.py:import copy
analysis/band_analysis.py:import functools
analysis/band_analysis.py:import itertools
analysis/band_analysis.py:from itertools import pairwise
analysis/band_analysis.py:from typing import TYPE_CHECKING, Any, Literal
analysis/band_analysis.py:import numpy as np
analysis/band_analysis.py:import xarray as xr
analysis/band_analysis.py:from scipy.spatial import distance
analysis/band_analysis.py:import arpes.models.band
analysis/band_analysis.py:import arpes.utilities.math
analysis/band_analysis.py:from arpes.constants import HBAR_SQ_EV_PER_ELECTRON_MASS_ANGSTROM_SQ
analysis/band_analysis.py:from arpes.fits import AffineBackgroundModel, LorentzianModel, QuadraticModel, broadcast_model
analysis/band_analysis.py:from arpes.provenance import update_provenance
analysis/band_analysis.py:from arpes.utilities import enumerate_dataarray, normalize_to_spectrum
analysis/band_analysis.py:from arpes.utilities.conversion.forward import convert_coordinates_to_kspace_forward
analysis/band_analysis.py:from arpes.utilities.jupyter import wrap_tqdm
analysis/band_analysis.py:    from collections.abc import Generator
analysis/band_analysis.py:    import lmfit as lf
analysis/band_analysis.py:    from _typeshed import Incomplete
analysis/band_analysis.py:    from numpy.typing import NDArray
analysis/band_analysis.py:    from arpes._typing import DataType
analysis/band_analysis.py:        from arpes.models.band import AffineBackgroundBand
analysis/band_analysis_utils.py:from __future__ import annotations
analysis/band_analysis_utils.py:from typing import TYPE_CHECKING, NamedTuple
analysis/band_analysis_utils.py:import numpy as np
analysis/band_analysis_utils.py:    from collections.abc import Callable
analysis/band_analysis_utils.py:    from lmfit import lf
analysis/decomposition.py:from __future__ import annotations
analysis/decomposition.py:from functools import wraps
analysis/decomposition.py:from typing import TYPE_CHECKING, Any
analysis/decomposition.py:from arpes.provenance import provenance
analysis/decomposition.py:from arpes.utilities import normalize_to_spectrum
analysis/decomposition.py:    from _typeshed import Incomplete
analysis/decomposition.py:    from arpes._typing import DataType
analysis/decomposition.py:    from sklearn.pipeline import make_pipeline
analysis/decomposition.py:    from sklearn.preprocessing import StandardScaler
analysis/decomposition.py:    from sklearn.decomposition import PCA
analysis/decomposition.py:    from sklearn.decomposition import FactorAnalysis
analysis/decomposition.py:    from sklearn.decomposition import FastICA
analysis/decomposition.py:    from sklearn.decomposition import NMF
analysis/deconvolution.py:from __future__ import annotations
analysis/deconvolution.py:import contextlib
analysis/deconvolution.py:import warnings
analysis/deconvolution.py:from typing import TYPE_CHECKING, Literal
analysis/deconvolution.py:import numpy as np
analysis/deconvolution.py:import scipy
analysis/deconvolution.py:import scipy.ndimage
analysis/deconvolution.py:import xarray as xr
analysis/deconvolution.py:from tqdm.notebook import tqdm
analysis/deconvolution.py:from arpes.fits.fit_models.functional_forms import gaussian
analysis/deconvolution.py:from arpes.provenance import update_provenance
analysis/deconvolution.py:from arpes.utilities import normalize_to_spectrum
analysis/deconvolution.py:    from collections.abc import Iterable
analysis/deconvolution.py:    from _typeshed import Incomplete
analysis/deconvolution.py:    from numpy.typing import NDArray
analysis/deconvolution.py:    from arpes._typing import DataType
analysis/derivative.py:from __future__ import annotations
analysis/derivative.py:import copy
analysis/derivative.py:import functools
analysis/derivative.py:from typing import TYPE_CHECKING, Literal
analysis/derivative.py:import numpy as np
analysis/derivative.py:import xarray as xr
analysis/derivative.py:from arpes.provenance import provenance, update_provenance
analysis/derivative.py:from arpes.utilities import normalize_to_spectrum
analysis/derivative.py:    from collections.abc import Callable
analysis/derivative.py:    from numpy.typing import NDArray
analysis/derivative.py:    from arpes._typing import DataType
analysis/filters.py:from __future__ import annotations
analysis/filters.py:import copy
analysis/filters.py:from typing import TYPE_CHECKING
analysis/filters.py:import numpy as np
analysis/filters.py:import xarray as xr
analysis/filters.py:from scipy import ndimage
analysis/filters.py:from arpes.provenance import provenance
analysis/filters.py:    from collections.abc import Callable
analysis/gap.py:from __future__ import annotations
analysis/gap.py:import warnings
analysis/gap.py:from typing import TYPE_CHECKING
analysis/gap.py:import numpy as np
analysis/gap.py:import xarray as xr
analysis/gap.py:from arpes.constants import K_BOLTZMANN_EV_KELVIN
analysis/gap.py:from arpes.fits.fit_models import AffineBroadenedFD
analysis/gap.py:from arpes.provenance import update_provenance
analysis/gap.py:from arpes.utilities import normalize_to_spectrum
analysis/gap.py:    from _typeshed import Incomplete
analysis/gap.py:    from arpes._typing import DataType
analysis/general.py:from __future__ import annotations
analysis/general.py:from typing import TYPE_CHECKING, Literal
analysis/general.py:import numpy as np
analysis/general.py:import xarray as xr
analysis/general.py:import arpes.constants
analysis/general.py:import arpes.models.band
analysis/general.py:import arpes.utilities
analysis/general.py:import arpes.utilities.math
analysis/general.py:from arpes.fits import GStepBModel, broadcast_model
analysis/general.py:from arpes.provenance import update_provenance
analysis/general.py:from arpes.utilities import normalize_to_spectrum
analysis/general.py:from arpes.utilities.math import fermi_distribution
analysis/general.py:from .filters import gaussian_filter_arr
analysis/general.py:    from arpes._typing import DataType
analysis/kfermi.py:from __future__ import annotations
analysis/kfermi.py:from typing import TYPE_CHECKING
analysis/kfermi.py:import numpy as np
analysis/kfermi.py:from arpes.fits import LinearModel
analysis/kfermi.py:    from numpy.typing import NDArray
analysis/kfermi.py:    from arpes._typing import DataType
analysis/mask.py:from __future__ import annotations
analysis/mask.py:from typing import TYPE_CHECKING
analysis/mask.py:import numpy as np
analysis/mask.py:from matplotlib.path import Path
analysis/mask.py:from arpes.provenance import update_provenance
analysis/mask.py:from arpes.utilities import normalize_to_spectrum
analysis/mask.py:    import xarray as xr
analysis/mask.py:    from _typeshed import Incomplete
analysis/mask.py:    from numpy.typing import NDArray
analysis/mask.py:    from arpes._typing import DataType
analysis/moire.py:from __future__ import annotations
analysis/moire.py:from typing import TYPE_CHECKING
analysis/moire.py:import matplotlib.pyplot as plt
analysis/moire.py:import numpy as np
analysis/moire.py:from scipy.spatial.distance import pdist
analysis/moire.py:from arpes.plotting.bz import Rotation, Translation, bz_plot
analysis/moire.py:from arpes.utilities.bz import hex_cell_2d
analysis/moire.py:    from collections.abc import Generator
analysis/moire.py:    from matplotlib.axes import Axes
analysis/moire.py:    from numpy.typing import NDArray
analysis/moire.py:    from ase.dft.bz import bz_vertices
analysis/moire.py:    from ase.dft.bz import bz_vertices
analysis/moire.py:    from ase.dft.kpoints import get_special_points
analysis/path.py:from __future__ import annotations
analysis/path.py:from typing import TYPE_CHECKING
analysis/path.py:import numpy as np
analysis/path.py:import xarray as xr
analysis/path.py:from arpes.provenance import update_provenance
analysis/path.py:    from _typeshed import Incomplete
analysis/path.py:    from numpy.typing import NDArray
analysis/path.py:    from arpes._typing import DataType
analysis/pocket.py:from __future__ import annotations
analysis/pocket.py:from typing import TYPE_CHECKING, Any
analysis/pocket.py:import numpy as np
analysis/pocket.py:import xarray as xr
analysis/pocket.py:from sklearn.decomposition import PCA
analysis/pocket.py:from arpes.fits.fit_models import AffineBackgroundModel, LorentzianModel
analysis/pocket.py:from arpes.provenance import update_provenance
analysis/pocket.py:from arpes.utilities import normalize_to_spectrum
analysis/pocket.py:from arpes.utilities.conversion import slice_along_path
analysis/pocket.py:    from collections.abc import Callable
analysis/pocket.py:    from _typeshed import Incomplete
analysis/pocket.py:    from arpes._typing import DataType
analysis/resolution.py:from __future__ import annotations
analysis/resolution.py:import math
analysis/resolution.py:from typing import TYPE_CHECKING, Any
analysis/resolution.py:import numpy as np
analysis/resolution.py:from arpes.constants import K_BOLTZMANN_MEV_KELVIN
analysis/resolution.py:from arpes.utilities import normalize_to_spectrum
analysis/resolution.py:    from arpes._typing import DataType
analysis/sarpes.py:from __future__ import annotations
analysis/sarpes.py:from typing import TYPE_CHECKING
analysis/sarpes.py:import xarray as xr
analysis/sarpes.py:from arpes.provenance import update_provenance
analysis/sarpes.py:from arpes.utilities import normalize_to_dataset
analysis/sarpes.py:from arpes.utilities.math import polarization
analysis/sarpes.py:    from arpes._typing import DataType
analysis/savitzky_golay.py:from __future__ import annotations
analysis/savitzky_golay.py:from math import factorial
analysis/savitzky_golay.py:from typing import TYPE_CHECKING, Literal
analysis/savitzky_golay.py:import numpy as np
analysis/savitzky_golay.py:import scipy.signal
analysis/savitzky_golay.py:import xarray as xr
analysis/savitzky_golay.py:from arpes.provenance import update_provenance
analysis/savitzky_golay.py:    from numpy.typing import NDArray
analysis/savitzky_golay.py:        import matplotlib.pyplot as plt
analysis/self_energy.py:from __future__ import annotations
analysis/self_energy.py:from typing import TYPE_CHECKING, Literal, TypeAlias
analysis/self_energy.py:import lmfit as lf
analysis/self_energy.py:import numpy as np
analysis/self_energy.py:import xarray as xr
analysis/self_energy.py:from arpes.constants import HBAR_PER_EV, METERS_PER_SECOND_PER_EV_ANGSTROM
analysis/self_energy.py:from arpes.fits.fit_models import AffineBackgroundModel, LinearModel, LorentzianModel
analysis/self_energy.py:from arpes.fits.utilities import broadcast_model
analysis/self_energy.py:    from _typeshed import Incomplete
analysis/self_energy.py:    from numpy.typing import NDArray
analysis/self_energy.py:        from skimage.measure import LineModelND, ransac
analysis/shirley.py:from __future__ import annotations
analysis/shirley.py:import warnings
analysis/shirley.py:from typing import TYPE_CHECKING
analysis/shirley.py:import numpy as np
analysis/shirley.py:import xarray as xr
analysis/shirley.py:from arpes.provenance import update_provenance
analysis/shirley.py:from arpes.utilities import normalize_to_spectrum
analysis/shirley.py:    from numpy.typing import NDArray
analysis/shirley.py:    from arpes._typing import DataType
analysis/statistics.py:from __future__ import annotations
analysis/statistics.py:import xarray as xr
analysis/statistics.py:from arpes.provenance import update_provenance
analysis/statistics.py:from arpes.utilities import lift_dataarray_to_generic
analysis/tarpes.py:from __future__ import annotations
analysis/tarpes.py:import warnings
analysis/tarpes.py:from typing import TYPE_CHECKING
analysis/tarpes.py:import numpy as np
analysis/tarpes.py:import xarray as xr
analysis/tarpes.py:from arpes.preparation import normalize_dim
analysis/tarpes.py:from arpes.provenance import update_provenance
analysis/tarpes.py:from arpes.utilities import normalize_to_spectrum
analysis/tarpes.py:    from arpes._typing import DataType
analysis/xps.py:from __future__ import annotations
analysis/xps.py:from typing import TYPE_CHECKING
analysis/xps.py:import numpy as np
analysis/xps.py:from arpes.utilities import normalize_to_spectrum
analysis/xps.py:from .general import rebin
analysis/xps.py:from .savitzky_golay import savitzky_golay
analysis/xps.py:    from numpy.typing import NDArray
analysis/xps.py:    from arpes._typing import DataType
bootstrap.py:from __future__ import annotations
bootstrap.py:import contextlib
bootstrap.py:import copy
bootstrap.py:import functools
bootstrap.py:import random
bootstrap.py:from dataclasses import dataclass
bootstrap.py:from logging import INFO, Formatter, StreamHandler, getLogger
bootstrap.py:from typing import TYPE_CHECKING, Any
bootstrap.py:import numpy as np
bootstrap.py:import scipy.stats
bootstrap.py:import xarray as xr
bootstrap.py:from tqdm.notebook import tqdm
bootstrap.py:from arpes.analysis.sarpes import to_intensity_polarization
bootstrap.py:from arpes.provenance import update_provenance
bootstrap.py:from arpes.utilities import lift_dataarray_to_generic
bootstrap.py:from arpes.utilities.normalize import normalize_to_spectrum
bootstrap.py:from arpes.utilities.region import normalize_region
bootstrap.py:    from collections.abc import Callable
bootstrap.py:    from _typeshed import Incomplete
bootstrap.py:    from lmfit import lf
bootstrap.py:    from numpy.typing import NDArray
bootstrap.py:    from arpes._typing import DataType
config.py:from __future__ import annotations
config.py:import json
config.py:import logging
config.py:import os.path
config.py:import warnings
config.py:from dataclasses import dataclass, field
config.py:from logging import INFO, Formatter, StreamHandler, getLogger
config.py:from pathlib import Path
config.py:from typing import TYPE_CHECKING, Any
config.py:import matplotlib as mpl
config.py:import pint
config.py:    from arpes._typing import CONFIGTYPE, ConfigSettings
config.py:    from arpes.utilities.collections import deep_update
config.py:    import importlib
config.py:    from arpes.endstations import add_endstation, plugin
config.py:            loaded_module = importlib.import_module(f"arpes.endstations.plugin.{module}")
config.py:        from IPython.core.getipython import get_ipython
config.py:        from IPython.core.interactiveshell import InteractiveShell
config.py:            from arpes.utilities.jupyter import generate_logfile_path
constants.py:from __future__ import annotations
constants.py:from typing import TYPE_CHECKING
constants.py:from numpy import pi
constants.py:    from arpes._typing import SPECTROMETER
corrections/__init__.py:from __future__ import annotations
corrections/__init__.py:from collections import OrderedDict
corrections/__init__.py:from typing import TYPE_CHECKING
corrections/__init__.py:import xarray as xr
corrections/__init__.py:from arpes.utilities import deep_equals, normalize_to_dataset
corrections/__init__.py:from .fermi_edge_corrections import *
corrections/__init__.py:    from arpes._typing import DataType
corrections/background.py:from __future__ import annotations
corrections/background.py:from typing import TYPE_CHECKING
corrections/background.py:import numpy as np
corrections/background.py:import xarray as xr
corrections/background.py:from arpes.provenance import update_provenance
corrections/background.py:from arpes.utilities import normalize_to_spectrum
corrections/background.py:    from arpes._typing import DataType
corrections/fermi_edge_corrections.py:from __future__ import annotations
corrections/fermi_edge_corrections.py:from typing import TYPE_CHECKING
corrections/fermi_edge_corrections.py:import matplotlib.pyplot as plt
corrections/fermi_edge_corrections.py:import numpy as np
corrections/fermi_edge_corrections.py:import xarray as xr
corrections/fermi_edge_corrections.py:from matplotlib.axes import Axes
corrections/fermi_edge_corrections.py:from arpes.fits import GStepBModel, LinearModel, QuadraticModel, broadcast_model
corrections/fermi_edge_corrections.py:from arpes.provenance import provenance, update_provenance
corrections/fermi_edge_corrections.py:from arpes.utilities.math import shift_by
corrections/fermi_edge_corrections.py:    import lmfit as lf
corrections/fermi_edge_corrections.py:    from _typeshed import Incomplete
deep_learning/__init__.py:from __future__ import annotations
deep_learning/formatters.py:from __future__ import annotations
deep_learning/formatters.py:from typing import Any
deep_learning/interpret.py:from __future__ import annotations
deep_learning/interpret.py:import math
deep_learning/interpret.py:from dataclasses import dataclass, field
deep_learning/interpret.py:from typing import TYPE_CHECKING, Any
deep_learning/interpret.py:import matplotlib.pyplot as plt
deep_learning/interpret.py:import numpy as np
deep_learning/interpret.py:import torch
deep_learning/interpret.py:import tqdm
deep_learning/interpret.py:from torch.utils.data.dataset import Subset
deep_learning/interpret.py:    import pytorch_lightning as pl
deep_learning/interpret.py:    from torch.utils.data import DataLoader
deep_learning/io.py:from __future__ import annotations
deep_learning/io.py:import json
deep_learning/io.py:from pathlib import Path
deep_learning/io.py:from typing import TYPE_CHECKING
deep_learning/io.py:import numpy as np
deep_learning/io.py:    from numpy.typing import NDArray
deep_learning/models/__init__.py:from __future__ import annotations
deep_learning/models/__init__.py:from .regression import *
deep_learning/models/regression.py:from __future__ import annotations
deep_learning/models/regression.py:import pytorch_lightning as pl
deep_learning/models/regression.py:from torch import nn, optim
deep_learning/models/regression.py:from torch.nn import functional
deep_learning/transforms.py:from __future__ import annotations
deep_learning/transforms.py:from dataclasses import dataclass, field
deep_learning/transforms.py:from typing import TYPE_CHECKING, Any
deep_learning/transforms.py:    from collections.abc import Callable
endstations/__init__.py:from __future__ import annotations
endstations/__init__.py:import contextlib
endstations/__init__.py:import copy
endstations/__init__.py:import os.path
endstations/__init__.py:import re
endstations/__init__.py:import warnings
endstations/__init__.py:from pathlib import Path
endstations/__init__.py:from typing import TYPE_CHECKING, ClassVar, TypedDict
endstations/__init__.py:import h5py
endstations/__init__.py:import numpy as np
endstations/__init__.py:import xarray as xr
endstations/__init__.py:from astropy.io import fits
endstations/__init__.py:import arpes.config
endstations/__init__.py:import arpes.constants
endstations/__init__.py:from arpes.endstations.fits_utils import find_clean_coords
endstations/__init__.py:from arpes.endstations.igor_utils import shim_wave_note
endstations/__init__.py:from arpes.load_pxt import find_ses_files_associated, read_single_pxt
endstations/__init__.py:from arpes.provenance import provenance_from_file
endstations/__init__.py:from arpes.repair import negate_energy
endstations/__init__.py:from arpes.trace import Trace, traceable
endstations/__init__.py:from arpes.utilities.dict import case_insensitive_get, rename_dataarray_attrs
endstations/__init__.py:    from collections.abc import Callable
endstations/__init__.py:    from _typeshed import Incomplete
endstations/__init__.py:    from arpes._typing import SPECTROMETER
endstations/__init__.py:        from arpes.utilities import rename_keys
endstations/__init__.py:        from arpes.utilities import rename_keys
endstations/__init__.py:          This is used as an import guard basiscally in case the user imported things
endstations/__init__.py:            import arpes.config  
endstations/fits_utils.py:from __future__ import annotations
endstations/fits_utils.py:import functools
endstations/fits_utils.py:import warnings
endstations/fits_utils.py:from ast import literal_eval
endstations/fits_utils.py:from collections.abc import Callable, Iterable
endstations/fits_utils.py:from logging import DEBUG, Formatter, StreamHandler, getLogger
endstations/fits_utils.py:from typing import TYPE_CHECKING, Any, TypeAlias
endstations/fits_utils.py:import numpy as np
endstations/fits_utils.py:from numpy import ndarray
endstations/fits_utils.py:from numpy._typing import NDArray
endstations/fits_utils.py:from arpes.trace import traceable
endstations/fits_utils.py:from arpes.utilities.funcutils import collect_leaves, iter_leaves
endstations/fits_utils.py:    from astropy.io.fits.hdu.table import BinTableHDU
endstations/fits_utils.py:            import pdb
endstations/fits_utils.py:                import pdb
endstations/fits_utils.py:        from collections import Counter
endstations/igor_utils.py:from __future__ import annotations
endstations/igor_utils.py:import contextlib
endstations/igor_utils.py:import itertools
endstations/igor_utils.py:import subprocess
endstations/igor_utils.py:from pathlib import Path
endstations/igor_utils.py:from typing import Any
endstations/nexus_utils.py:from __future__ import annotations
endstations/nexus_utils.py:import contextlib
endstations/nexus_utils.py:from dataclasses import dataclass, field
endstations/nexus_utils.py:from typing import TYPE_CHECKING, Any
endstations/nexus_utils.py:import numpy as np
endstations/nexus_utils.py:    from collections.abc import Callable
endstations/nexus_utils.py:    import xarray as xr
endstations/plugin/__init__.py:from __future__ import annotations
endstations/plugin/ALG_main.py:from __future__ import annotations
endstations/plugin/ALG_main.py:from typing import TYPE_CHECKING, ClassVar
endstations/plugin/ALG_main.py:import numpy as np
endstations/plugin/ALG_main.py:from arpes.endstations import SCANDESC, FITSEndstation, HemisphericalEndstation
endstations/plugin/ALG_main.py:    import xarray as xr
endstations/plugin/ALG_main.py:    from arpes._typing import ARPESAttrs
endstations/plugin/ALG_spin_ToF.py:from __future__ import annotations
endstations/plugin/ALG_spin_ToF.py:import copy
endstations/plugin/ALG_spin_ToF.py:import itertools
endstations/plugin/ALG_spin_ToF.py:import os.path
endstations/plugin/ALG_spin_ToF.py:import warnings
endstations/plugin/ALG_spin_ToF.py:from pathlib import Path
endstations/plugin/ALG_spin_ToF.py:from typing import TYPE_CHECKING, ClassVar
endstations/plugin/ALG_spin_ToF.py:import h5py
endstations/plugin/ALG_spin_ToF.py:import numpy as np
endstations/plugin/ALG_spin_ToF.py:import xarray as xr
endstations/plugin/ALG_spin_ToF.py:from astropy.io import fits
endstations/plugin/ALG_spin_ToF.py:import arpes.config
endstations/plugin/ALG_spin_ToF.py:from arpes.endstations import EndstationBase, find_clean_coords
endstations/plugin/ALG_spin_ToF.py:from arpes.provenance import provenance_from_file
endstations/plugin/ALG_spin_ToF.py:from arpes.utilities import rename_keys
endstations/plugin/ALG_spin_ToF.py:    from _typeshed import Incomplete
endstations/plugin/ANTARES.py:from __future__ import annotations
endstations/plugin/ANTARES.py:import warnings
endstations/plugin/ANTARES.py:from collections import Counter
endstations/plugin/ANTARES.py:from typing import TYPE_CHECKING, ClassVar
endstations/plugin/ANTARES.py:import h5py
endstations/plugin/ANTARES.py:import numpy as np
endstations/plugin/ANTARES.py:import xarray as xr
endstations/plugin/ANTARES.py:from arpes.endstations import (
endstations/plugin/ANTARES.py:from arpes.endstations.nexus_utils import (
endstations/plugin/ANTARES.py:from arpes.preparation import disambiguate_coordinates
endstations/plugin/ANTARES.py:    from _typeshed import Incomplete
endstations/plugin/BL10_SARPES.py:from __future__ import annotations
endstations/plugin/BL10_SARPES.py:from pathlib import Path
endstations/plugin/BL10_SARPES.py:from typing import TYPE_CHECKING, ClassVar
endstations/plugin/BL10_SARPES.py:import numpy as np
endstations/plugin/BL10_SARPES.py:from arpes.endstations import (
endstations/plugin/BL10_SARPES.py:    import xarray as xr
endstations/plugin/BL10_SARPES.py:    from _typeshed import Incomplete
endstations/plugin/BL10_SARPES.py:        from arpes.load_pxt import find_ses_files_associated, read_single_pxt
endstations/plugin/BL10_SARPES.py:        import os
endstations/plugin/BL10_SARPES.py:        from arpes.load_pxt import read_single_pxt
endstations/plugin/Elettra_spectromicroscopy.py:from __future__ import annotations
endstations/plugin/Elettra_spectromicroscopy.py:import os
endstations/plugin/Elettra_spectromicroscopy.py:from pathlib import Path
endstations/plugin/Elettra_spectromicroscopy.py:from typing import TYPE_CHECKING, ClassVar
endstations/plugin/Elettra_spectromicroscopy.py:import h5py
endstations/plugin/Elettra_spectromicroscopy.py:import numpy as np
endstations/plugin/Elettra_spectromicroscopy.py:import xarray as xr
endstations/plugin/Elettra_spectromicroscopy.py:import arpes.config
endstations/plugin/Elettra_spectromicroscopy.py:from arpes.endstations import HemisphericalEndstation, SynchrotronEndstation
endstations/plugin/Elettra_spectromicroscopy.py:from arpes.utilities import unwrap_xarray_item
endstations/plugin/Elettra_spectromicroscopy.py:    from _typeshed import Incomplete
endstations/plugin/Elettra_spectromicroscopy.py:    from numpy.typing import NDArray
endstations/plugin/Elettra_spectromicroscopy.py:    from arpes.endstations import SCANDESC
endstations/plugin/example_data.py:from __future__ import annotations
endstations/plugin/example_data.py:from typing import TYPE_CHECKING, ClassVar
endstations/plugin/example_data.py:import numpy as np
endstations/plugin/example_data.py:import xarray as xr
endstations/plugin/example_data.py:import arpes.xarray_extensions 
endstations/plugin/example_data.py:from arpes.endstations import HemisphericalEndstation, SingleFileEndstation
endstations/plugin/example_data.py:    from _typeshed import Incomplete
endstations/plugin/fallback.py:from __future__ import annotations
endstations/plugin/fallback.py:import warnings
endstations/plugin/fallback.py:from typing import TYPE_CHECKING, ClassVar
endstations/plugin/fallback.py:from arpes.endstations import EndstationBase, resolve_endstation
endstations/plugin/fallback.py:from arpes.trace import traceable
endstations/plugin/fallback.py:    from _typeshed import Incomplete
endstations/plugin/fallback.py:    from arpes.endstations import SCANDESC
endstations/plugin/fallback.py:        import arpes.config
endstations/plugin/HERS.py:from __future__ import annotations
endstations/plugin/HERS.py:import copy
endstations/plugin/HERS.py:import itertools
endstations/plugin/HERS.py:import os.path
endstations/plugin/HERS.py:import warnings
endstations/plugin/HERS.py:from typing import TYPE_CHECKING, ClassVar
endstations/plugin/HERS.py:import numpy as np
endstations/plugin/HERS.py:import xarray as xr
endstations/plugin/HERS.py:from astropy.io import fits
endstations/plugin/HERS.py:import arpes.config
endstations/plugin/HERS.py:from arpes.endstations import HemisphericalEndstation, SynchrotronEndstation, find_clean_coords
endstations/plugin/HERS.py:from arpes.provenance import provenance_from_file
endstations/plugin/HERS.py:from arpes.utilities import rename_keys
endstations/plugin/HERS.py:    from _typeshed import Incomplete
endstations/plugin/igor_export.py:from __future__ import annotations
endstations/plugin/igor_export.py:import copy
endstations/plugin/igor_export.py:from pathlib import Path
endstations/plugin/igor_export.py:from typing import TYPE_CHECKING, ClassVar
endstations/plugin/igor_export.py:import h5py
endstations/plugin/igor_export.py:import numpy as np
endstations/plugin/igor_export.py:import xarray as xr
endstations/plugin/igor_export.py:from arpes.endstations import SESEndstation
endstations/plugin/igor_export.py:from arpes.load_pxt import read_single_pxt
endstations/plugin/igor_export.py:from arpes.provenance import provenance_from_file
endstations/plugin/igor_export.py:from arpes.repair import negate_energy
endstations/plugin/igor_export.py:    from _typeshed import Incomplete
endstations/plugin/igor_export.py:            import arpes.config
endstations/plugin/igor_plugin.py:from __future__ import annotations
endstations/plugin/igor_plugin.py:from typing import TYPE_CHECKING, ClassVar
endstations/plugin/igor_plugin.py:import xarray as xr
endstations/plugin/igor_plugin.py:from arpes.endstations import (
endstations/plugin/igor_plugin.py:from arpes.load_pxt import read_single_pxt
endstations/plugin/igor_plugin.py:    from _typeshed import Incomplete
endstations/plugin/kaindl.py:from __future__ import annotations
endstations/plugin/kaindl.py:import os
endstations/plugin/kaindl.py:import re
endstations/plugin/kaindl.py:from pathlib import Path
endstations/plugin/kaindl.py:from typing import TYPE_CHECKING, ClassVar
endstations/plugin/kaindl.py:import numpy as np
endstations/plugin/kaindl.py:import pandas as pd
endstations/plugin/kaindl.py:import xarray as xr
endstations/plugin/kaindl.py:from arpes.config import DATA_PATH
endstations/plugin/kaindl.py:from arpes.endstations import HemisphericalEndstation, SESEndstation
endstations/plugin/kaindl.py:    from arpes.endstations import SCANDESC
endstations/plugin/MAESTRO.py:from __future__ import annotations
endstations/plugin/MAESTRO.py:from typing import TYPE_CHECKING, ClassVar
endstations/plugin/MAESTRO.py:import numpy as np
endstations/plugin/MAESTRO.py:from arpes.endstations import (
endstations/plugin/MAESTRO.py:    import xarray as xr
endstations/plugin/MAESTRO.py:    from _typeshed import Incomplete
endstations/plugin/MBS.py:from __future__ import annotations
endstations/plugin/MBS.py:import warnings
endstations/plugin/MBS.py:from pathlib import Path
endstations/plugin/MBS.py:from typing import ClassVar
endstations/plugin/MBS.py:import numpy as np
endstations/plugin/MBS.py:import xarray as xr
endstations/plugin/MBS.py:from arpes.endstations import SCANDESC, HemisphericalEndstation
endstations/plugin/MBS.py:from arpes.utilities import clean_keys
endstations/plugin/merlin.py:from __future__ import annotations
endstations/plugin/merlin.py:import re
endstations/plugin/merlin.py:from pathlib import Path
endstations/plugin/merlin.py:from typing import TYPE_CHECKING, Any, ClassVar
endstations/plugin/merlin.py:import numpy as np
endstations/plugin/merlin.py:import xarray as xr
endstations/plugin/merlin.py:from arpes.endstations import HemisphericalEndstation, SESEndstation, SynchrotronEndstation
endstations/plugin/merlin.py:    from _typeshed import Incomplete
endstations/plugin/merlin.py:    from arpes._typing import SPECTROMETER
endstations/plugin/merlin.py:        import copy
endstations/plugin/merlin.py:        import os
endstations/plugin/merlin.py:        from arpes.load_pxt import find_ses_files_associated, read_single_pxt
endstations/plugin/merlin.py:        from arpes.repair import negate_energy
endstations/plugin/merlin.py:        import os
endstations/plugin/merlin.py:        from arpes.load_pxt import read_single_pxt
endstations/plugin/merlin.py:        from arpes.repair import negate_energy
endstations/plugin/SPD_main.py:from __future__ import annotations
endstations/plugin/SPD_main.py:from pathlib import Path
endstations/plugin/SPD_main.py:from typing import TYPE_CHECKING, ClassVar
endstations/plugin/SPD_main.py:import numpy as np
endstations/plugin/SPD_main.py:import xarray as xr
endstations/plugin/SPD_main.py:from arpes.endstations import (
endstations/plugin/SPD_main.py:from arpes.endstations.prodigy_itx import load_itx, load_sp2
endstations/plugin/SPD_main.py:    from arpes._typing import SPECTROMETER
endstations/plugin/SPD_main.py:    from arpes.endstations import SCANDESC
endstations/plugin/SSRF_NSRL.py:from __future__ import annotations
endstations/plugin/SSRF_NSRL.py:import io
endstations/plugin/SSRF_NSRL.py:from configparser import ConfigParser
endstations/plugin/SSRF_NSRL.py:from pathlib import Path
endstations/plugin/SSRF_NSRL.py:from typing import TYPE_CHECKING, ClassVar
endstations/plugin/SSRF_NSRL.py:from zipfile import ZipFile
endstations/plugin/SSRF_NSRL.py:import numpy as np
endstations/plugin/SSRF_NSRL.py:import xarray as xr
endstations/plugin/SSRF_NSRL.py:from arpes.endstations import SingleFileEndstation, SynchrotronEndstation
endstations/plugin/SSRF_NSRL.py:from arpes.load_pxt import read_single_pxt
endstations/plugin/SSRF_NSRL.py:    from _typeshed import Incomplete
endstations/plugin/SSRF_NSRL.py:    from arpes._typing import SPECTROMETER
endstations/plugin/SToF_DLD.py:from __future__ import annotations
endstations/plugin/SToF_DLD.py:import copy
endstations/plugin/SToF_DLD.py:import os.path
endstations/plugin/SToF_DLD.py:import warnings
endstations/plugin/SToF_DLD.py:from typing import TYPE_CHECKING
endstations/plugin/SToF_DLD.py:import h5py
endstations/plugin/SToF_DLD.py:import numpy as np
endstations/plugin/SToF_DLD.py:import xarray as xr
endstations/plugin/SToF_DLD.py:import arpes.config
endstations/plugin/SToF_DLD.py:from arpes.endstations import EndstationBase
endstations/plugin/SToF_DLD.py:from arpes.provenance import provenance_from_file
endstations/plugin/SToF_DLD.py:    from _typeshed import Incomplete
endstations/prodigy_itx.py:from __future__ import annotations
endstations/prodigy_itx.py:import re
endstations/prodigy_itx.py:from datetime import UTC, datetime
endstations/prodigy_itx.py:from pathlib import Path
endstations/prodigy_itx.py:from typing import TYPE_CHECKING, Literal
endstations/prodigy_itx.py:import numpy as np
endstations/prodigy_itx.py:import xarray as xr
endstations/prodigy_itx.py:    from numpy.typing import NDArray
exceptions.py:from __future__ import annotations
experiment/__init__.py:from __future__ import annotations
experiment/__init__.py:import json
experiment/__init__.py:from itertools import chain, product
experiment/__init__.py:from pathlib import Path
experiment/__init__.py:from typing import TYPE_CHECKING, Any, ClassVar
experiment/__init__.py:import numpy as np
experiment/__init__.py:    from collections.abc import Iterable, Iterator
experiment/__init__.py:    from _typeshed import Incomplete
fits/__init__.py:from __future__ import annotations
fits/__init__.py:from .fit_models import *
fits/__init__.py:from .lmfit_plot import ModelResultPlotKwargs, patched_plot, transform_lmfit_titles
fits/__init__.py:from .utilities import broadcast_model, result_to_hints
fits/broadcast_common.py:from __future__ import annotations
fits/broadcast_common.py:import functools
fits/broadcast_common.py:import operator
fits/broadcast_common.py:import warnings
fits/broadcast_common.py:from string import ascii_lowercase
fits/broadcast_common.py:from typing import TYPE_CHECKING, Any
fits/broadcast_common.py:import lmfit
fits/broadcast_common.py:import xarray as xr
fits/broadcast_common.py:    from collections.abc import Iterable
fits/broadcast_common.py:    from _typeshed import Incomplete
fits/fit_models/__init__.py:"""Collect imports from categorized submodules."""
fits/fit_models/__init__.py:from __future__ import annotations
fits/fit_models/__init__.py:from .backgrounds import AffineBackgroundModel
fits/fit_models/__init__.py:from .decay import ExponentialDecayCModel, TwoExponentialDecayCModel
fits/fit_models/__init__.py:from .dirac import DiracDispersionModel
fits/fit_models/__init__.py:from .fermi_edge import (
fits/fit_models/__init__.py:from .misc import FermiVelocityRenormalizationModel, LogRenormalizationModel, QuadraticModel
fits/fit_models/__init__.py:from .peaks import TwoGaussianModel, TwoLorModel
fits/fit_models/__init__.py:from .two_dimensional import EffectiveMassModel, Gaussian2DModel
fits/fit_models/__init__.py:from .wrapped import (
fits/fit_models/__init__.py:from .x_model_mixin import XModelMixin, gaussian_convolve
fits/fit_models/backgrounds.py:from __future__ import annotations
fits/fit_models/backgrounds.py:from typing import TYPE_CHECKING
fits/fit_models/backgrounds.py:import numpy as np
fits/fit_models/backgrounds.py:from lmfit.models import update_param_vals
fits/fit_models/backgrounds.py:from .functional_forms import affine_bkg
fits/fit_models/backgrounds.py:from .x_model_mixin import XModelMixin
fits/fit_models/backgrounds.py:    import lmfit as lf
fits/fit_models/backgrounds.py:    import xarray as xr
fits/fit_models/backgrounds.py:    from _typeshed import Incomplete
fits/fit_models/backgrounds.py:    from numpy.typing import NDArray
fits/fit_models/backgrounds.py:    from arpes._typing import NAN_POLICY
fits/fit_models/decay.py:from __future__ import annotations
fits/fit_models/decay.py:from typing import TYPE_CHECKING
fits/fit_models/decay.py:import lmfit as lf
fits/fit_models/decay.py:import numpy as np
fits/fit_models/decay.py:from lmfit.models import update_param_vals
fits/fit_models/decay.py:from .x_model_mixin import XModelMixin
fits/fit_models/decay.py:    import xarray as xr
fits/fit_models/decay.py:    from _typeshed import Incomplete
fits/fit_models/decay.py:    from numpy.typing import NDArray
fits/fit_models/decay.py:    from arpes._typing import NAN_POLICY
fits/fit_models/dirac.py:from __future__ import annotations
fits/fit_models/dirac.py:from typing import TYPE_CHECKING
fits/fit_models/dirac.py:import lmfit as lf
fits/fit_models/dirac.py:from lmfit.models import update_param_vals
fits/fit_models/dirac.py:from .functional_forms import lorentzian
fits/fit_models/dirac.py:from .x_model_mixin import XModelMixin
fits/fit_models/dirac.py:    import numpy as np
fits/fit_models/dirac.py:    from _typeshed import Incomplete
fits/fit_models/dirac.py:    from numpy.typing import NDArray
fits/fit_models/dirac.py:    from arpes._typing import NAN_POLICY
fits/fit_models/fermi_edge.py:from __future__ import annotations
fits/fit_models/fermi_edge.py:from typing import TYPE_CHECKING
fits/fit_models/fermi_edge.py:import lmfit as lf
fits/fit_models/fermi_edge.py:import numpy as np
fits/fit_models/fermi_edge.py:from lmfit.models import update_param_vals
fits/fit_models/fermi_edge.py:from scipy import stats
fits/fit_models/fermi_edge.py:from scipy.ndimage import gaussian_filter
fits/fit_models/fermi_edge.py:from .functional_forms import (
fits/fit_models/fermi_edge.py:from .x_model_mixin import XModelMixin
fits/fit_models/fermi_edge.py:    import xarray as xr
fits/fit_models/fermi_edge.py:    from _typeshed import Incomplete
fits/fit_models/fermi_edge.py:    from numpy.typing import NDArray
fits/fit_models/fermi_edge.py:    from arpes._typing import NAN_POLICY, DataType
fits/fit_models/functional_forms.py:from __future__ import annotations
fits/fit_models/functional_forms.py:from typing import TYPE_CHECKING
fits/fit_models/functional_forms.py:import numpy as np
fits/fit_models/functional_forms.py:from scipy.special import erfc 
fits/fit_models/functional_forms.py:    from numpy.typing import NDArray
fits/fit_models/misc.py:from __future__ import annotations
fits/fit_models/misc.py:from typing import TYPE_CHECKING
fits/fit_models/misc.py:import lmfit as lf
fits/fit_models/misc.py:import numpy as np
fits/fit_models/misc.py:from lmfit.models import update_param_vals
fits/fit_models/misc.py:from .x_model_mixin import XModelMixin
fits/fit_models/misc.py:    import xarray as xr
fits/fit_models/misc.py:    from _typeshed import Incomplete
fits/fit_models/misc.py:    from numpy._typing import NDArray
fits/fit_models/misc.py:    from arpes._typing import NAN_POLICY
fits/fit_models/peaks.py:from __future__ import annotations
fits/fit_models/peaks.py:from typing import TYPE_CHECKING
fits/fit_models/peaks.py:import lmfit as lf
fits/fit_models/peaks.py:from lmfit.models import update_param_vals
fits/fit_models/peaks.py:from .functional_forms import affine_bkg, gaussian, twolorentzian
fits/fit_models/peaks.py:from .x_model_mixin import XModelMixin
fits/fit_models/peaks.py:    import numpy as np
fits/fit_models/peaks.py:    import xarray as xr
fits/fit_models/peaks.py:    from _typeshed import Incomplete
fits/fit_models/peaks.py:    from numpy.typing import NDArray
fits/fit_models/peaks.py:    from arpes._typing import NAN_POLICY
fits/fit_models/two_dimensional.py:from __future__ import annotations
fits/fit_models/two_dimensional.py:from typing import TYPE_CHECKING, ClassVar
fits/fit_models/two_dimensional.py:import lmfit as lf
fits/fit_models/two_dimensional.py:import numpy as np
fits/fit_models/two_dimensional.py:import xarray as xr
fits/fit_models/two_dimensional.py:from lmfit.models import update_param_vals
fits/fit_models/two_dimensional.py:from arpes.constants import HBAR_SQ_EV_PER_ELECTRON_MASS_ANGSTROM_SQ
fits/fit_models/two_dimensional.py:from .x_model_mixin import XModelMixin
fits/fit_models/two_dimensional.py:    from _typeshed import Incomplete
fits/fit_models/two_dimensional.py:    from numpy.typing import NDArray
fits/fit_models/two_dimensional.py:    from arpes._typing import NAN_POLICY
fits/fit_models/wrapped.py:from __future__ import annotations
fits/fit_models/wrapped.py:from typing import TYPE_CHECKING
fits/fit_models/wrapped.py:import lmfit as lf
fits/fit_models/wrapped.py:import numpy as np
fits/fit_models/wrapped.py:from lmfit.models import guess_from_peak, update_param_vals
fits/fit_models/wrapped.py:from .x_model_mixin import XModelMixin
fits/fit_models/wrapped.py:    import xarray as xr
fits/fit_models/wrapped.py:    from _typeshed import Incomplete
fits/fit_models/wrapped.py:    from numpy.typing import NDArray
fits/fit_models/wrapped.py:    from arpes._typing import NAN_POLICY
fits/fit_models/x_model_mixin.py:from __future__ import annotations
fits/fit_models/x_model_mixin.py:import operator
fits/fit_models/x_model_mixin.py:import warnings
fits/fit_models/x_model_mixin.py:from logging import DEBUG, Formatter, StreamHandler, getLogger
fits/fit_models/x_model_mixin.py:from typing import TYPE_CHECKING
fits/fit_models/x_model_mixin.py:import lmfit as lf
fits/fit_models/x_model_mixin.py:import numpy as np
fits/fit_models/x_model_mixin.py:import xarray as xr
fits/fit_models/x_model_mixin.py:from lmfit.models import GaussianModel
fits/fit_models/x_model_mixin.py:    from typing import Any
fits/fit_models/x_model_mixin.py:    from _typeshed import Incomplete
fits/fit_models/x_model_mixin.py:    from lmfit.model import ModelResult
fits/fit_models/x_model_mixin.py:    from numpy.typing import NDArray
fits/fit_models/x_model_mixin.py:                import pdb
fits/hot_pool.py:because otherwise pools are too slow due to heavy analysis imports (scipy, etc.).
fits/hot_pool.py:from __future__ import annotations
fits/hot_pool.py:from multiprocessing import Pool, pool
fits/lmfit_html_repr.py:from __future__ import annotations
fits/lmfit_html_repr.py:from typing import TYPE_CHECKING
fits/lmfit_html_repr.py:import numpy as np
fits/lmfit_html_repr.py:from lmfit import model
fits/lmfit_html_repr.py:    from _typeshed import Incomplete
fits/lmfit_plot.py:from __future__ import annotations
fits/lmfit_plot.py:from typing import TYPE_CHECKING, Literal, TypedDict, Unpack
fits/lmfit_plot.py:import matplotlib.pyplot as plt
fits/lmfit_plot.py:import xarray as xr
fits/lmfit_plot.py:from lmfit import model
fits/lmfit_plot.py:    import numpy as np
fits/lmfit_plot.py:    from _typeshed import Incomplete
fits/lmfit_plot.py:    from matplotlib.figure import Figure
fits/lmfit_plot.py:    from numpy.typing import NDArray
fits/lmfit_plot.py:    from arpes.plotting.utils import transform_labels
fits/lmfit_plot.py:            from arpes.plotting.utils import fancy_labels
fits/mp_fits.py:from __future__ import annotations
fits/mp_fits.py:from dataclasses import dataclass, field
fits/mp_fits.py:from typing import TYPE_CHECKING, Any
fits/mp_fits.py:import dill
fits/mp_fits.py:from .broadcast_common import apply_window, compile_model, unwrap_params
fits/mp_fits.py:    import numpy as np
fits/mp_fits.py:    import xarray as xr
fits/mp_fits.py:    from numpy.typing import NDArray
fits/utilities.py:from __future__ import annotations
fits/utilities.py:import os
fits/utilities.py:from typing import TYPE_CHECKING, Any
fits/utilities.py:import dill
fits/utilities.py:import numpy as np
fits/utilities.py:import xarray as xr
fits/utilities.py:from tqdm.notebook import tqdm
fits/utilities.py:import arpes.fits.fit_models
fits/utilities.py:from arpes.provenance import update_provenance
fits/utilities.py:from arpes.trace import traceable
fits/utilities.py:from arpes.utilities import normalize_to_spectrum
fits/utilities.py:from . import mp_fits
fits/utilities.py:    from collections.abc import Callable, Iterable
fits/utilities.py:    import lmfit
fits/utilities.py:    from arpes._typing import DataType
fits/utilities.py:        from .hot_pool import hot_pool
fits/zones.py:from __future__ import annotations
fits/zones.py:from typing import TYPE_CHECKING
fits/zones.py:import numpy as np
fits/zones.py:from arpes.utilities.conversion.forward import convert_coordinates
fits/zones.py:    from numpy.typing import NDArray
fits/zones.py:    from arpes._typing import DataType
io.py:The most important here are the data loading functions (load_data, load_example_data).
io.py:from __future__ import annotations
io.py:import pickle
io.py:import warnings
io.py:from collections.abc import Iterable
io.py:from dataclasses import dataclass
io.py:from pathlib import Path
io.py:from typing import TYPE_CHECKING
io.py:import pandas as pd
io.py:import xarray as xr
io.py:from arpes.endstations import load_scan
io.py:    from _typeshed import Incomplete
io.py:    from arpes._typing import DataType
io.py:    from arpes.provenance import provenance_multiple_parents
io.py:    from arpes.config import CONFIG
laser.py:from __future__ import annotations
laser.py:from typing import TYPE_CHECKING
laser.py:from arpes.config import ureg
laser.py:    import pint
laue/__init__.py:from __future__ import annotations
laue/__init__.py:from pathlib import Path
laue/__init__.py:import numpy as np
laue/__init__.py:import xarray as xr
laue/__init__.py:from arpes.provenance import provenance_from_file
load_pxt.py:from __future__ import annotations
load_pxt.py:import contextlib
load_pxt.py:import re
load_pxt.py:import warnings
load_pxt.py:from pathlib import Path
load_pxt.py:from typing import TYPE_CHECKING, Any, Literal
load_pxt.py:import numpy as np
load_pxt.py:import xarray as xr
load_pxt.py:from arpes.utilities.string import safe_decode
load_pxt.py:    from _typeshed import Incomplete
load_pxt.py:    from arpes._typing import DataType
load_pxt.py:    from arpes.utilities import rename_keys
load_pxt.py:    import igor.igorpy as igor
load_pxt.py:    import igor.igorpy as igor
load_pxt.py:    import igor.igorpy as igor
models/__init__.py:from __future__ import annotations
models/__init__.py:from .band import *
models/band.py:from __future__ import annotations
models/band.py:from typing import TYPE_CHECKING
models/band.py:import numpy as np
models/band.py:import scipy.ndimage.filters
models/band.py:import xarray as xr
models/band.py:import arpes.fits
models/band.py:from arpes.analysis.band_analysis_utils import param_getter, param_stderr_getter
models/band.py:    import lmfit as lf
models/band.py:    from numpy.typing import NDArray
models/band.py:    from arpes._typing import DataType
optics.py:from __future__ import annotations
optics.py:import numpy as np
plotting/__init__.py:from __future__ import annotations
plotting/__init__.py:from .dispersion import (
plotting/__init__.py:from .stack_plot import stack_dispersion_plot, flat_stack_plot, offset_scatter_plot
plotting/__init__.py:from .bands import plot_with_bands
plotting/__init__.py:from .basic import make_reference_plots
plotting/__init__.py:from .annotations import annotate_cuts, annotate_experimental_conditions, annotate_point
plotting/__init__.py:from .dos import plot_core_levels, plot_dos
plotting/__init__.py:from .fermi_edge import fermi_edge_reference, plot_fit
plotting/__init__.py:from .fermi_surface import fermi_surface_slices, magnify_circular_regions_plot
plotting/__init__.py:from .movie import plot_movie
plotting/__init__.py:from .parameter import plot_parameter
plotting/__init__.py:from .spatial import plot_spatial_reference, reference_scan_spatial
plotting/__init__.py:from .spin import spin_polarized_spectrum, spin_colored_spectrum, spin_difference_spectrum
plotting/__init__.py:from .utils import (
plotting/__init__.py:from .band_tool import BandTool
plotting/__init__.py:from .qt_tool import qt_tool
plotting/__init__.py:from .qt_ktool import ktool
plotting/__init__.py:from .curvature_tool import CurvatureTool
plotting/__init__.py:from .comparison_tool import compare
plotting/__init__.py:from .path_tool import path_tool
plotting/__init__.py:from .dyn_tool import DynamicTool, dyn
plotting/__init__.py:from .interactive import ImageTool
plotting/__init__.py:from .fit_inspection_tool import FitCheckTool
plotting/__init__.py:from .mask_tool import mask
plotting/annotations.py:from __future__ import annotations
plotting/annotations.py:from typing import TYPE_CHECKING, Unpack
plotting/annotations.py:import numpy as np
plotting/annotations.py:from mpl_toolkits.mplot3d import Axes3D
plotting/annotations.py:from arpes.utilities.conversion.forward import convert_coordinates_to_kspace_forward
plotting/annotations.py:from .utils import name_for_dim, unit_for_dim
plotting/annotations.py:    from collections.abc import Sequence
plotting/annotations.py:    from _typeshed import Incomplete
plotting/annotations.py:    from matplotlib.axes import Axes
plotting/annotations.py:    from numpy.typing import NDArray
plotting/annotations.py:    from arpes._typing import DataType, MPLTextParam
plotting/band_tool.py:from __future__ import annotations
plotting/band_tool.py:import contextlib
plotting/band_tool.py:import numpy as np
plotting/band_tool.py:import xarray as xr
plotting/band_tool.py:from bokeh import events
plotting/band_tool.py:from ..analysis.band_analysis import fit_patterned_bands
plotting/band_tool.py:from ..exceptions import AnalysisError
plotting/band_tool.py:from ..models import band
plotting/band_tool.py:from .interactive_utils import CursorTool, SaveableTool
plotting/band_tool.py:from ..utilities import normalize_to_spectrum
plotting/band_tool.py:        from bokeh.layouts import column, row
plotting/band_tool.py:        from bokeh.models import widgets
plotting/band_tool.py:        from bokeh.models.mappers import LinearColorMapper
plotting/band_tool.py:        from bokeh.plotting import figure
plotting/bands.py:from __future__ import annotations
plotting/bands.py:from typing import TYPE_CHECKING
plotting/bands.py:import matplotlib.pyplot as plt
plotting/bands.py:from matplotlib.axes import Axes
plotting/bands.py:from arpes.provenance import save_plot_provenance
plotting/bands.py:from .utils import label_for_colorbar, path_for_plot
plotting/bands.py:    from pathlib import Path
plotting/bands.py:    from _typeshed import Incomplete
plotting/bands.py:    from matplotlib.colors import Normalize
plotting/bands.py:    from arpes._typing import DataType
plotting/basic.py:from __future__ import annotations
plotting/basic.py:import warnings
plotting/basic.py:from logging import INFO, Formatter, StreamHandler, getLogger
plotting/basic.py:from typing import TYPE_CHECKING
plotting/basic.py:import xarray as xr
plotting/basic.py:from arpes.io import load_data
plotting/basic.py:from arpes.preparation import normalize_dim
plotting/basic.py:from arpes.utilities.conversion import convert_to_kspace
plotting/basic.py:    import pandas as pd
plotting/basic_tools/__init__.py:from __future__ import annotations
plotting/basic_tools/__init__.py:import contextlib
plotting/basic_tools/__init__.py:from typing import TYPE_CHECKING
plotting/basic_tools/__init__.py:import numpy as np
plotting/basic_tools/__init__.py:import pyqtgraph as pg
plotting/basic_tools/__init__.py:from PySide6 import QtCore, QtWidgets
plotting/basic_tools/__init__.py:from scipy import interpolate
plotting/basic_tools/__init__.py:from arpes import analysis
plotting/basic_tools/__init__.py:from arpes.utilities import normalize_to_spectrum
plotting/basic_tools/__init__.py:from arpes.utilities.conversion import DetectorCalibration
plotting/basic_tools/__init__.py:from arpes.utilities.qt import BasicHelpDialog, SimpleApp, SimpleWindow, qt_info
plotting/basic_tools/__init__.py:from arpes.utilities.ui import KeyBinding
plotting/basic_tools/__init__.py:    from collections.abc import Callable, Sequence
plotting/basic_tools/__init__.py:    from _typeshed import Incomplete
plotting/basic_tools/__init__.py:    from numpy.typing import NDArray
plotting/basic_tools/__init__.py:    from PySicde6.QtWidgets import QLayout
plotting/basic_tools/__init__.py:    from PySide6.QtCore import Point
plotting/basic_tools/__init__.py:    from arpes._typing import DataType
plotting/bz.py:from __future__ import annotations
plotting/bz.py:import itertools
plotting/bz.py:import warnings
plotting/bz.py:from typing import TYPE_CHECKING, TypeAlias
plotting/bz.py:import matplotlib.cm
plotting/bz.py:import matplotlib.pyplot as plt
plotting/bz.py:import numpy as np
plotting/bz.py:import xarray as xr
plotting/bz.py:from matplotlib.axes import Axes
plotting/bz.py:from matplotlib.patches import FancyArrowPatch
plotting/bz.py:from mpl_toolkits.mplot3d import Axes3D, proj3d
plotting/bz.py:from mpl_toolkits.mplot3d.art3d import Poly3DCollection
plotting/bz.py:from scipy.spatial.transform import Rotation
plotting/bz.py:from arpes.analysis.mask import apply_mask_to_coords
plotting/bz.py:from arpes.utilities import normalize_to_spectrum
plotting/bz.py:from arpes.utilities.bz import build_2dbz_poly, hex_cell_2d, process_kpath
plotting/bz.py:from arpes.utilities.bz_spec import A_GRAPHENE, A_WS2, A_WSe2
plotting/bz.py:from arpes.utilities.geometry import polyhedron_intersect_plane
plotting/bz.py:from .utils import path_for_plot
plotting/bz.py:    from collections.abc import Callable, Sequence
plotting/bz.py:    from pathlib import Path
plotting/bz.py:    from _typeshed import Incomplete
plotting/bz.py:    from matplotlib.figure import Figure
plotting/bz.py:    from matplotlib.typing import ColorType
plotting/bz.py:    from numpy.typing import ArrayLike, NDArray
plotting/bz.py:    from arpes._typing import DataType
plotting/bz.py:    from ase.dft.bz import bz_vertices
plotting/bz.py:        from ase.dft.bz import bz_vertices 
plotting/bz.py:        from ase.cell import Cell
plotting/bz.py:        from ase.dft.kpoints import parse_path_string
plotting/bz.py:    from ase.dft.bz import bz_vertices
plotting/bz.py:        from ase.cell import Cell
plotting/bz.py:        from ase.dft.kpoints import parse_path_string
plotting/bz_tool/__init__.py:from __future__ import annotations
plotting/bz_tool/__init__.py:import contextlib
plotting/bz_tool/__init__.py:import warnings
plotting/bz_tool/__init__.py:from logging import INFO, Formatter, StreamHandler, getLogger
plotting/bz_tool/__init__.py:from typing import TYPE_CHECKING
plotting/bz_tool/__init__.py:import numpy as np
plotting/bz_tool/__init__.py:import xarray as xr
plotting/bz_tool/__init__.py:from matplotlib.axes import Axes
plotting/bz_tool/__init__.py:from matplotlib.backends.backend_qt import FigureCanvas
plotting/bz_tool/__init__.py:from matplotlib.figure import Figure
plotting/bz_tool/__init__.py:from PySide6 import QtWidgets
plotting/bz_tool/__init__.py:from arpes.plotting.utils import imshow_arr
plotting/bz_tool/__init__.py:from arpes.utilities.bz_spec import SURFACE_ZONE_DEFINITIONS, MaterialParams2D
plotting/bz_tool/__init__.py:from arpes.utilities.conversion import convert_coordinates
plotting/bz_tool/__init__.py:from arpes.utilities.image import imread_to_xarray
plotting/bz_tool/__init__.py:from arpes.utilities.qt import BasicHelpDialog, SimpleWindow
plotting/bz_tool/__init__.py:from arpes.utilities.ui import combo_box, horizontal, tabs
plotting/bz_tool/__init__.py:from .CoordinateOffsetWidget import CoordinateOffsetWidget
plotting/bz_tool/__init__.py:from .RangeOrSingleValueWidget import RangeOrSingleValueWidget
plotting/bz_tool/__init__.py:    from _typeshed import Incomplete
plotting/bz_tool/__init__.py:    from PySide6.QtWidgets import QLayout, QWidget
plotting/bz_tool/CoordinateOffsetWidget.py:from __future__ import annotations
plotting/bz_tool/CoordinateOffsetWidget.py:from functools import partial
plotting/bz_tool/CoordinateOffsetWidget.py:from typing import TYPE_CHECKING
plotting/bz_tool/CoordinateOffsetWidget.py:from PySide6 import QtWidgets
plotting/bz_tool/CoordinateOffsetWidget.py:    from _typeshed import Incomplete
plotting/bz_tool/CoordinateOffsetWidget.py:    from PySide6.QtWidgets import QWidget
plotting/bz_tool/CoordinateOffsetWidget.py:    from . import BZTool
plotting/bz_tool/RangeOrSingleValueWidget.py:from __future__ import annotations
plotting/bz_tool/RangeOrSingleValueWidget.py:from functools import partial
plotting/bz_tool/RangeOrSingleValueWidget.py:from typing import TYPE_CHECKING
plotting/bz_tool/RangeOrSingleValueWidget.py:from PySide6 import QtWidgets
plotting/bz_tool/RangeOrSingleValueWidget.py:    from _typeshed import Incomplete
plotting/bz_tool/RangeOrSingleValueWidget.py:    from PySide6.QtWidgets import QWidget
plotting/bz_tool/RangeOrSingleValueWidget.py:    from . import BZTool
plotting/comparison_tool.py:from __future__ import annotations
plotting/comparison_tool.py:import contextlib
plotting/comparison_tool.py:from typing import TYPE_CHECKING
plotting/comparison_tool.py:import colorcet as cc
plotting/comparison_tool.py:import numpy as np
plotting/comparison_tool.py:import scipy.ndimage.interpolation
plotting/comparison_tool.py:import xarray as xr
plotting/comparison_tool.py:from arpes.plotting.interactive_utils import BokehInteractiveTool
plotting/comparison_tool.py:from arpes.utilities.funcutils import Debounce
plotting/comparison_tool.py:from arpes.utilities.normalize import normalize_to_spectrum
plotting/comparison_tool.py:    from arpes._typing import DataType
plotting/comparison_tool.py:        from bokeh.layouts import column, row
plotting/comparison_tool.py:        from bokeh.models import widgets
plotting/comparison_tool.py:        from bokeh.models.mappers import LinearColorMapper
plotting/comparison_tool.py:        from bokeh.plotting import figure
plotting/curvature_tool.py:from __future__ import annotations
plotting/curvature_tool.py:from typing import TYPE_CHECKING
plotting/curvature_tool.py:import numpy as np
plotting/curvature_tool.py:from arpes.analysis.derivative import curvature, d1_along_axis, d2_along_axis
plotting/curvature_tool.py:from arpes.analysis.filters import boxcar_filter, gaussian_filter
plotting/curvature_tool.py:from arpes.plotting.interactive_utils import BokehInteractiveTool
plotting/curvature_tool.py:from arpes.utilities.funcutils import Debounce
plotting/curvature_tool.py:    from _typeshed import Incomplete
plotting/curvature_tool.py:        from bokeh.layouts import column, row
plotting/curvature_tool.py:        from bokeh.models import Spacer, widgets
plotting/curvature_tool.py:        from bokeh.models.mappers import LinearColorMapper
plotting/curvature_tool.py:        from bokeh.plotting import figure
plotting/dispersion.py:from __future__ import annotations
plotting/dispersion.py:import warnings
plotting/dispersion.py:from collections import defaultdict
plotting/dispersion.py:from typing import TYPE_CHECKING, Literal, TypedDict, Unpack
plotting/dispersion.py:import matplotlib.pyplot as plt
plotting/dispersion.py:import numpy as np
plotting/dispersion.py:from matplotlib.axes import Axes
plotting/dispersion.py:from mpl_toolkits.mplot3d import Axes3D
plotting/dispersion.py:from arpes.io import load_data
plotting/dispersion.py:from arpes.preparation import normalize_dim
plotting/dispersion.py:from arpes.provenance import save_plot_provenance
plotting/dispersion.py:from arpes.utilities import bz
plotting/dispersion.py:from arpes.utilities.conversion import remap_coords_to
plotting/dispersion.py:from .utils import label_for_colorbar, label_for_dim, label_for_symmetry_point, path_for_plot
plotting/dispersion.py:    from pathlib import Path
plotting/dispersion.py:    import xarray as xr
plotting/dispersion.py:    from matplotlib.colors import Colormap, Normalize
plotting/dispersion.py:    from matplotlib.figure import Figure, FigureBase
plotting/dispersion.py:    from numpy.typing import NDArray
plotting/dispersion.py:    from arpes._typing import DataType, PColorMeshKwargs
plotting/dos.py:from __future__ import annotations
plotting/dos.py:from typing import TYPE_CHECKING
plotting/dos.py:import matplotlib as mpl
plotting/dos.py:import numpy as np
plotting/dos.py:import xarray as xr
plotting/dos.py:from matplotlib import colors, gridspec
plotting/dos.py:from matplotlib import pyplot as plt
plotting/dos.py:from arpes.analysis.xps import approximate_core_levels
plotting/dos.py:from arpes.provenance import save_plot_provenance
plotting/dos.py:from arpes.utilities import normalize_to_spectrum
plotting/dos.py:from .utils import path_for_plot, savefig
plotting/dos.py:    from pathlib import Path
plotting/dos.py:    from matplotlib.axes import Axes
plotting/dos.py:    from matplotlib.colorbar import Colorbar
plotting/dos.py:    from matplotlib.colors import Normalize
plotting/dos.py:    from matplotlib.figure import Figure
plotting/dos.py:    from arpes._typing import DataType
plotting/dyn_tool.py:from __future__ import annotations
plotting/dyn_tool.py:import contextlib
plotting/dyn_tool.py:import inspect
plotting/dyn_tool.py:from typing import TYPE_CHECKING
plotting/dyn_tool.py:import numpy as np
plotting/dyn_tool.py:from arpes.exceptions import AnalysisError
plotting/dyn_tool.py:from arpes.plotting.interactive_utils import BokehInteractiveTool, CursorTool
plotting/dyn_tool.py:from arpes.utilities import Debounce, normalize_to_spectrum
plotting/dyn_tool.py:    from collections.abc import Callable
plotting/dyn_tool.py:    from _typeshed import Incomplete
plotting/dyn_tool.py:    from arpes._typing import DataType
plotting/dyn_tool.py:        from bokeh import events
plotting/dyn_tool.py:        from bokeh.layouts import column, row
plotting/dyn_tool.py:        from bokeh.models import widgets
plotting/dyn_tool.py:        from bokeh.models.mappers import LinearColorMapper
plotting/dyn_tool.py:        from bokeh.plotting import figure
plotting/dynamic_tool.py:from __future__ import annotations
plotting/dynamic_tool.py:import inspect
plotting/dynamic_tool.py:from collections.abc import Sized
plotting/dynamic_tool.py:from logging import INFO, Formatter, StreamHandler, getLogger
plotting/dynamic_tool.py:from typing import TYPE_CHECKING, Any
plotting/dynamic_tool.py:from PySide6 import QtWidgets
plotting/dynamic_tool.py:from arpes.utilities import group_by, normalize_to_spectrum
plotting/dynamic_tool.py:from arpes.utilities.qt import BasicHelpDialog, SimpleApp, SimpleWindow, qt_info
plotting/dynamic_tool.py:from arpes.utilities.ui import (
plotting/dynamic_tool.py:    from collections.abc import Callable
plotting/dynamic_tool.py:    from _typeshed import Incomplete
plotting/dynamic_tool.py:    from PySide6.QtWidgets import QLayout, QWidget
plotting/dynamic_tool.py:    from arpes._typing import DataType
plotting/false_color.py:from __future__ import annotations
plotting/false_color.py:from typing import TYPE_CHECKING
plotting/false_color.py:import matplotlib.colors
plotting/false_color.py:import matplotlib.pyplot as plt
plotting/false_color.py:import numpy as np
plotting/false_color.py:import xarray as xr
plotting/false_color.py:from matplotlib.axes import Axes
plotting/false_color.py:from arpes.provenance import save_plot_provenance
plotting/false_color.py:from arpes.utilities import normalize_to_spectrum
plotting/false_color.py:from .utils import imshow_arr, path_for_plot
plotting/false_color.py:    from pathlib import Path
plotting/false_color.py:    from _typeshed import Incomplete
plotting/false_color.py:    from matplotlib.figure import Figure
plotting/false_color.py:    from numpy.typing import NDArray
plotting/fermi_edge.py:from __future__ import annotations
plotting/fermi_edge.py:import warnings
plotting/fermi_edge.py:from typing import TYPE_CHECKING
plotting/fermi_edge.py:import matplotlib.pyplot as plt
plotting/fermi_edge.py:import numpy as np
plotting/fermi_edge.py:import xarray as xr
plotting/fermi_edge.py:from matplotlib.axes import Axes
plotting/fermi_edge.py:from arpes.fits import GStepBModel, broadcast_model
plotting/fermi_edge.py:from arpes.provenance import save_plot_provenance
plotting/fermi_edge.py:from arpes.utilities import apply_dataarray
plotting/fermi_edge.py:from .utils import label_for_dim, path_for_plot
plotting/fermi_edge.py:    from pathlib import Path
plotting/fermi_edge.py:    from matplotlib.colors import Normalize
plotting/fermi_edge.py:    from numpy.typing import NDArray
plotting/fermi_surface.py:from __future__ import annotations
plotting/fermi_surface.py:from typing import TYPE_CHECKING
plotting/fermi_surface.py:import holoviews as hv
plotting/fermi_surface.py:import matplotlib.patches
plotting/fermi_surface.py:import matplotlib.path
plotting/fermi_surface.py:import matplotlib.pyplot as plt
plotting/fermi_surface.py:import numpy as np
plotting/fermi_surface.py:import xarray as xr
plotting/fermi_surface.py:from matplotlib.axes import Axes
plotting/fermi_surface.py:from arpes.provenance import save_plot_provenance
plotting/fermi_surface.py:from arpes.utilities import normalize_to_spectrum
plotting/fermi_surface.py:from .utils import path_for_holoviews, path_for_plot
plotting/fermi_surface.py:    from pathlib import Path
plotting/fermi_surface.py:    from matplotlib.colors import Colormap
plotting/fermi_surface.py:    from matplotlib.figure import Figure
plotting/fermi_surface.py:    from matplotlib.typing import ColorType
plotting/fermi_surface.py:    from numpy.typing import NDArray
plotting/fermi_surface.py:    from arpes._typing import DataType
plotting/fit_inspection_tool.py:from __future__ import annotations
plotting/fit_inspection_tool.py:import contextlib
plotting/fit_inspection_tool.py:from typing import TYPE_CHECKING
plotting/fit_inspection_tool.py:import numpy as np
plotting/fit_inspection_tool.py:import xarray as xr
plotting/fit_inspection_tool.py:from bokeh import events
plotting/fit_inspection_tool.py:from arpes.plotting.interactive_utils import BokehInteractiveTool, CursorTool
plotting/fit_inspection_tool.py:    from _typeshed import Incomplete
plotting/fit_inspection_tool.py:        from bokeh.layouts import Spacer, column, row
plotting/fit_inspection_tool.py:        from bokeh.models import widgets
plotting/fit_inspection_tool.py:        from bokeh.models.mappers import LinearColorMapper
plotting/fit_inspection_tool.py:        from bokeh.models.widgets.markups import Div
plotting/fit_inspection_tool.py:        from bokeh.plotting import figure
plotting/fit_tool/__init__.py:from __future__ import annotations
plotting/fit_tool/__init__.py:import contextlib
plotting/fit_tool/__init__.py:import enum
plotting/fit_tool/__init__.py:import warnings
plotting/fit_tool/__init__.py:import weakref
plotting/fit_tool/__init__.py:from dataclasses import dataclass
plotting/fit_tool/__init__.py:from typing import TYPE_CHECKING
plotting/fit_tool/__init__.py:import dill
plotting/fit_tool/__init__.py:import matplotlib as mpl
plotting/fit_tool/__init__.py:import numpy as np
plotting/fit_tool/__init__.py:import pyqtgraph as pg
plotting/fit_tool/__init__.py:import xarray as xr
plotting/fit_tool/__init__.py:from PySide6 import QtCore, QtGui, QtWidgets
plotting/fit_tool/__init__.py:from PySide6.QtWidgets import QLayout, QWidget
plotting/fit_tool/__init__.py:from arpes.fits.utilities import result_to_hints
plotting/fit_tool/__init__.py:from arpes.plotting.qt_tool.BinningInfoWidget import BinningInfoWidget
plotting/fit_tool/__init__.py:from arpes.utilities.qt import (
plotting/fit_tool/__init__.py:from arpes.utilities.qt.data_array_image_view import DataArrayPlot
plotting/fit_tool/__init__.py:from arpes.utilities.qt.utils import PlotOrientation, ReactivePlotRecord
plotting/fit_tool/__init__.py:from arpes.utilities.ui import CursorRegion, KeyBinding, button, horizontal, label, tabs
plotting/fit_tool/__init__.py:from .fit_inspection_plot import FitInspectionPlot
plotting/fit_tool/__init__.py:    from _typeshed import Incomplete
plotting/fit_tool/fit_inspection_plot.py:from __future__ import annotations
plotting/fit_tool/fit_inspection_plot.py:from typing import TYPE_CHECKING
plotting/fit_tool/fit_inspection_plot.py:import numpy as np
plotting/fit_tool/fit_inspection_plot.py:import pyqtgraph as pg
plotting/fit_tool/fit_inspection_plot.py:import xarray as xr
plotting/fit_tool/fit_inspection_plot.py:from PySide6 import QtCore, QtWidgets
plotting/fit_tool/fit_inspection_plot.py:from PySide6.QtWidgets import QGridLayout, QLayout, QWidget
plotting/fit_tool/fit_inspection_plot.py:from arpes.utilities.qt import qt_info
plotting/fit_tool/fit_inspection_plot.py:from arpes.utilities.qt.data_array_image_view import DataArrayPlot
plotting/fit_tool/fit_inspection_plot.py:    from weakref import ReferenceType
plotting/fit_tool/fit_inspection_plot.py:    import lmfit
plotting/fit_tool/fit_inspection_plot.py:    from _typeshed import Incomplete
plotting/fit_tool/fit_inspection_plot.py:    from numpy.typing import NDArray
plotting/fit_tool/fit_inspection_plot.py:    from . import FitTool
plotting/fits.py:from __future__ import annotations
plotting/fits.py:import matplotlib.pyplot as plt
plotting/fits.py:import numpy as np
plotting/fits.py:from matplotlib.axes import Axes
plotting/fits.py:from .utils import simple_ax_grid
plotting/interactive.py:from __future__ import annotations
plotting/interactive.py:import contextlib
plotting/interactive.py:import copy
plotting/interactive.py:import warnings
plotting/interactive.py:from typing import TYPE_CHECKING
plotting/interactive.py:import colorcet as cc
plotting/interactive.py:import numpy as np
plotting/interactive.py:from arpes.fits import ExponentialDecayCModel, GStepBModel
plotting/interactive.py:from .interactive_utils import CursorTool, SaveableTool
plotting/interactive.py:    from _typeshed import Incomplete
plotting/interactive.py:            from skimage import exposure
plotting/interactive.py:        from bokeh import events
plotting/interactive.py:        from bokeh.layouts import Spacer, column, row
plotting/interactive.py:        from bokeh.models import ColumnDataSource, widgets
plotting/interactive.py:        from bokeh.models.mappers import LinearColorMapper
plotting/interactive.py:        from bokeh.models.widgets.markups import Div
plotting/interactive.py:        from bokeh.plotting import figure
plotting/interactive.py:        from bokeh import events
plotting/interactive.py:        from bokeh.layouts import Spacer, column, row
plotting/interactive.py:        from bokeh.models import ColumnDataSource, HoverTool, widgets
plotting/interactive.py:        from bokeh.models.mappers import LinearColorMapper
plotting/interactive.py:        from bokeh.models.widgets.markups import Div
plotting/interactive.py:        from bokeh.plotting import figure
plotting/interactive_utils.py:from __future__ import annotations
plotting/interactive_utils.py:import contextlib
plotting/interactive_utils.py:import json
plotting/interactive_utils.py:import warnings
plotting/interactive_utils.py:from abc import ABC, abstractmethod
plotting/interactive_utils.py:from pathlib import Path
plotting/interactive_utils.py:from typing import TYPE_CHECKING, Any
plotting/interactive_utils.py:import colorcet as cc
plotting/interactive_utils.py:import numpy as np
plotting/interactive_utils.py:import arpes.config
plotting/interactive_utils.py:from ..analysis.general import rebin
plotting/interactive_utils.py:from ..io import load_data
plotting/interactive_utils.py:from ..utilities import deep_equals
plotting/interactive_utils.py:    import xarray as xr
plotting/interactive_utils.py:    from _typeshed import Incomplete
plotting/interactive_utils.py:        from bokeh.models.widgets.markups import Div
plotting/interactive_utils.py:        from bokeh.models.widgets.markups import Div
plotting/interactive_utils.py:        from bokeh.io import output_notebook
plotting/interactive_utils.py:        from bokeh import palettes
plotting/interactive_utils.py:        from bokeh.application import Application
plotting/interactive_utils.py:        from bokeh.application.handlers import FunctionHandler
plotting/interactive_utils.py:        from bokeh.io import show
plotting/mask_tool.py:from __future__ import annotations
plotting/mask_tool.py:import contextlib
plotting/mask_tool.py:from typing import TYPE_CHECKING
plotting/mask_tool.py:import numpy as np
plotting/mask_tool.py:from arpes.analysis.mask import apply_mask
plotting/mask_tool.py:from arpes.exceptions import AnalysisError
plotting/mask_tool.py:from arpes.plotting.interactive_utils import CursorTool, SaveableTool
plotting/mask_tool.py:from arpes.utilities import normalize_to_spectrum
plotting/mask_tool.py:    from _typeshed import Incomplete
plotting/mask_tool.py:    from arpes._typing import DataType
plotting/mask_tool.py:        from bokeh import events
plotting/mask_tool.py:        from bokeh.layouts import column, row
plotting/mask_tool.py:        from bokeh.models import widgets
plotting/mask_tool.py:        from bokeh.models.mappers import LinearColorMapper
plotting/mask_tool.py:        from bokeh.plotting import figure
plotting/movie.py:from __future__ import annotations
plotting/movie.py:from typing import TYPE_CHECKING, Unpack
plotting/movie.py:import numpy as np
plotting/movie.py:import xarray as xr
plotting/movie.py:from matplotlib import animation
plotting/movie.py:from matplotlib import pyplot as plt
plotting/movie.py:from matplotlib.axes import Axes
plotting/movie.py:from matplotlib.figure import Figure
plotting/movie.py:import arpes.config
plotting/movie.py:from arpes.provenance import save_plot_provenance
plotting/movie.py:from .utils import path_for_plot
plotting/movie.py:    from pathlib import Path
plotting/movie.py:    from matplotlib.collections import QuadMesh
plotting/movie.py:    from arpes._typing import PColorMeshKwargs
plotting/parameter.py:from __future__ import annotations
plotting/parameter.py:from typing import TYPE_CHECKING, Literal
plotting/parameter.py:import matplotlib.pyplot as plt
plotting/parameter.py:from arpes.provenance import save_plot_provenance
plotting/parameter.py:from .utils import latex_escape
plotting/parameter.py:    import numpy as np
plotting/parameter.py:    import xarray as xr
plotting/parameter.py:    from matplotlib.axes import Axes
plotting/parameter.py:    from matplotlib.typing import RGBColorType
plotting/parameter.py:    from numpy.typing import NDArray
plotting/path_tool.py:from __future__ import annotations
plotting/path_tool.py:import contextlib
plotting/path_tool.py:from typing import TYPE_CHECKING
plotting/path_tool.py:import numpy as np
plotting/path_tool.py:import xarray as xr
plotting/path_tool.py:from arpes.analysis.path import select_along_path
plotting/path_tool.py:from arpes.exceptions import AnalysisError
plotting/path_tool.py:from arpes.plotting.interactive_utils import CursorTool, SaveableTool
plotting/path_tool.py:from arpes.utilities import normalize_to_spectrum
plotting/path_tool.py:    from _typeshed import Incomplete
plotting/path_tool.py:    from arpes._typing import DataType
plotting/path_tool.py:        from bokeh import events
plotting/path_tool.py:        from bokeh.layouts import column, row
plotting/path_tool.py:        from bokeh.models import warnings, widgets
plotting/path_tool.py:        from bokeh.models.mappers import LinearColorMapper
plotting/path_tool.py:        from bokeh.plotting import figure
plotting/qt_ktool/__init__.py:from __future__ import annotations
plotting/qt_ktool/__init__.py:from typing import TYPE_CHECKING
plotting/qt_ktool/__init__.py:import numpy as np
plotting/qt_ktool/__init__.py:from PySide6 import QtWidgets
plotting/qt_ktool/__init__.py:from arpes.plotting.bz import segments_standard
plotting/qt_ktool/__init__.py:from arpes.utilities import group_by, normalize_to_spectrum
plotting/qt_ktool/__init__.py:from arpes.utilities.conversion import convert_to_kspace
plotting/qt_ktool/__init__.py:from arpes.utilities.qt import SimpleApp, SimpleWindow, qt_info
plotting/qt_ktool/__init__.py:from arpes.utilities.ui import CollectUI, horizontal, label, numeric_input, tabs, vertical
plotting/qt_ktool/__init__.py:    from collections.abc import Callable, Sequence
plotting/qt_ktool/__init__.py:    from _typeshed import Incomplete
plotting/qt_ktool/__init__.py:    from PySide6.QtWidgets import QLayout
plotting/qt_ktool/__init__.py:    from arpes._typing import ANGLE, DataType
plotting/qt_tool/__init__.py:from __future__ import annotations
plotting/qt_tool/__init__.py:import contextlib
plotting/qt_tool/__init__.py:import warnings
plotting/qt_tool/__init__.py:import weakref
plotting/qt_tool/__init__.py:from itertools import pairwise
plotting/qt_tool/__init__.py:from logging import DEBUG, INFO, Formatter, StreamHandler, getLogger
plotting/qt_tool/__init__.py:from typing import TYPE_CHECKING, reveal_type
plotting/qt_tool/__init__.py:import dill
plotting/qt_tool/__init__.py:import matplotlib as mpl
plotting/qt_tool/__init__.py:import numpy as np
plotting/qt_tool/__init__.py:import pyqtgraph as pg
plotting/qt_tool/__init__.py:from PySide6 import QtCore, QtGui, QtWidgets
plotting/qt_tool/__init__.py:from arpes.utilities import normalize_to_spectrum
plotting/qt_tool/__init__.py:from arpes.utilities.qt import (
plotting/qt_tool/__init__.py:from arpes.utilities.qt.data_array_image_view import DataArrayPlot
plotting/qt_tool/__init__.py:from arpes.utilities.qt.utils import PlotOrientation
plotting/qt_tool/__init__.py:from arpes.utilities.ui import CursorRegion, KeyBinding, horizontal, tabs
plotting/qt_tool/__init__.py:from .AxisInfoWidget import AxisInfoWidget
plotting/qt_tool/__init__.py:from .BinningInfoWidget import BinningInfoWidget
plotting/qt_tool/__init__.py:    from _typeshed import Incomplete
plotting/qt_tool/__init__.py:    from PySide6.QtWidgets import QWidget
plotting/qt_tool/__init__.py:    from arpes._typing import DataType
plotting/qt_tool/AxisInfoWidget.py:from __future__ import annotations
plotting/qt_tool/AxisInfoWidget.py:import contextlib
plotting/qt_tool/AxisInfoWidget.py:from typing import TYPE_CHECKING
plotting/qt_tool/AxisInfoWidget.py:from PySide6 import QtWidgets
plotting/qt_tool/AxisInfoWidget.py:    from . import QtTool
plotting/qt_tool/BinningInfoWidget.py:from __future__ import annotations
plotting/qt_tool/BinningInfoWidget.py:from typing import TYPE_CHECKING
plotting/qt_tool/BinningInfoWidget.py:from PySide6 import QtWidgets
plotting/qt_tool/BinningInfoWidget.py:from arpes.utilities.ui import layout
plotting/qt_tool/BinningInfoWidget.py:    from . import QtTool
plotting/spatial.py:from __future__ import annotations
plotting/spatial.py:import contextlib
plotting/spatial.py:import itertools
plotting/spatial.py:from typing import TYPE_CHECKING, Any
plotting/spatial.py:import matplotlib as mpl
plotting/spatial.py:import matplotlib.patheffects as path_effects
plotting/spatial.py:import matplotlib.pyplot as plt
plotting/spatial.py:import numpy as np
plotting/spatial.py:import xarray as xr
plotting/spatial.py:from matplotlib import gridspec, patches
plotting/spatial.py:from arpes.io import load_data
plotting/spatial.py:from arpes.provenance import save_plot_provenance
plotting/spatial.py:from arpes.utilities import normalize_to_spectrum
plotting/spatial.py:from arpes.utilities.xarray import unwrap_xarray_item
plotting/spatial.py:from .annotations import annotate_point
plotting/spatial.py:from .utils import (
plotting/spatial.py:    from pathlib import Path
plotting/spatial.py:    from matplotlib.axes import Axes
plotting/spatial.py:    from matplotlib.figure import Figure
plotting/spatial.py:    from numpy.typing import NDArray
plotting/spatial.py:    from arpes._typing import DataType
plotting/spatial.py:        from adjustText import adjust_text
plotting/spin.py:from __future__ import annotations
plotting/spin.py:from typing import TYPE_CHECKING
plotting/spin.py:import matplotlib as mpl
plotting/spin.py:import matplotlib.colors
plotting/spin.py:import matplotlib.pyplot as plt
plotting/spin.py:import numpy as np
plotting/spin.py:from matplotlib.axes import Axes
plotting/spin.py:from matplotlib.collections import LineCollection
plotting/spin.py:from matplotlib.figure import Figure
plotting/spin.py:from mpl_toolkits.axes_grid1.inset_locator import inset_axes
plotting/spin.py:from arpes.analysis.sarpes import to_intensity_polarization
plotting/spin.py:from arpes.analysis.statistics import mean_and_deviation
plotting/spin.py:from arpes.bootstrap import bootstrap
plotting/spin.py:from arpes.provenance import save_plot_provenance
plotting/spin.py:from arpes.utilities.math import polarization, propagate_statistical_error
plotting/spin.py:from .tof import scatter_with_std
plotting/spin.py:from .utils import label_for_dim, path_for_plot, polarization_colorbar, savefig
plotting/spin.py:    from pathlib import Path
plotting/spin.py:    import xarray as xr
plotting/spin.py:    from _typeshed import Incomplete
plotting/spin.py:    from numpy.typing import NDArray
plotting/stack_plot.py:from __future__ import annotations
plotting/stack_plot.py:import contextlib
plotting/stack_plot.py:import warnings
plotting/stack_plot.py:from typing import TYPE_CHECKING, Literal
plotting/stack_plot.py:import matplotlib as mpl
plotting/stack_plot.py:import matplotlib.colorbar
plotting/stack_plot.py:import matplotlib.colors
plotting/stack_plot.py:import matplotlib.pyplot as plt
plotting/stack_plot.py:import matplotlib.ticker
plotting/stack_plot.py:import numpy as np
plotting/stack_plot.py:import xarray as xr
plotting/stack_plot.py:from matplotlib import colorbar
plotting/stack_plot.py:from matplotlib.axes import Axes
plotting/stack_plot.py:from matplotlib.colors import Colormap
plotting/stack_plot.py:from mpl_toolkits.axes_grid1.inset_locator import inset_axes
plotting/stack_plot.py:from arpes.analysis import rebin
plotting/stack_plot.py:from arpes.provenance import save_plot_provenance
plotting/stack_plot.py:from arpes.utilities import normalize_to_spectrum
plotting/stack_plot.py:from .tof import scatter_with_std
plotting/stack_plot.py:from .utils import (
plotting/stack_plot.py:    from collections.abc import Callable
plotting/stack_plot.py:    from pathlib import Path
plotting/stack_plot.py:    from _typeshed import Incomplete
plotting/stack_plot.py:    from matplotlib.figure import Figure
plotting/stack_plot.py:    from matplotlib.typing import ColorType, RGBAColorType
plotting/stack_plot.py:    from numpy.typing import NDArray
plotting/stack_plot.py:    from arpes._typing import DataType
plotting/tof.py:delay line on a hemisphere, the important point is that the data in any given channel should
plotting/tof.py:from __future__ import annotations
plotting/tof.py:from typing import TYPE_CHECKING
plotting/tof.py:import matplotlib.pyplot as plt
plotting/tof.py:import numpy as np
plotting/tof.py:from matplotlib.axes import Axes
plotting/tof.py:from arpes.provenance import save_plot_provenance
plotting/tof.py:from .utils import path_for_plot
plotting/tof.py:    from pathlib import Path
plotting/tof.py:    import xarray as xr
plotting/tof.py:    from matplotlib.figure import Figure
plotting/tof.py:    from arpes._typing import DataType
plotting/utils.py:from __future__ import annotations
plotting/utils.py:import contextlib
plotting/utils.py:import datetime
plotting/utils.py:import errno
plotting/utils.py:import itertools
plotting/utils.py:import json
plotting/utils.py:import os.path
plotting/utils.py:import pickle
plotting/utils.py:import re
plotting/utils.py:import warnings
plotting/utils.py:from collections import Counter
plotting/utils.py:from collections.abc import Generator, Iterable, Sequence
plotting/utils.py:from datetime import UTC
plotting/utils.py:from logging import DEBUG, Formatter, StreamHandler, getLogger
plotting/utils.py:from pathlib import Path
plotting/utils.py:from typing import TYPE_CHECKING, Literal, Unpack
plotting/utils.py:import matplotlib as mpl
plotting/utils.py:import matplotlib.pyplot as plt
plotting/utils.py:import numpy as np
plotting/utils.py:import xarray as xr
plotting/utils.py:from matplotlib import colorbar, colors, gridspec
plotting/utils.py:from matplotlib.axes import Axes
plotting/utils.py:from matplotlib.colors import Colormap, colorConverter
plotting/utils.py:from matplotlib.figure import Figure
plotting/utils.py:from matplotlib.lines import Line2D
plotting/utils.py:from arpes import VERSION
plotting/utils.py:from arpes._typing import IMshowParam
plotting/utils.py:from arpes.config import CONFIG, SETTINGS, attempt_determine_workspace, is_using_tex
plotting/utils.py:from arpes.utilities import normalize_to_spectrum
plotting/utils.py:from arpes.utilities.jupyter import get_notebook_name, get_recent_history
plotting/utils.py:    from collections.abc import Callable
plotting/utils.py:    from _typeshed import Incomplete
plotting/utils.py:    from lmfit.model import Model
plotting/utils.py:    from matplotlib.font_manager import FontProperties
plotting/utils.py:    from matplotlib.image import AxesImage
plotting/utils.py:    from matplotlib.typing import ColorType, RGBAColorType, RGBColorType
plotting/utils.py:    from numpy.typing import NDArray
plotting/utils.py:    from arpes._typing import ColorbarParam, DataType, MPLPlotKwargs, PLTSubplotParam
plotting/utils.py:        import arpes.config
plotting/utils.py:        from titlecase import titlecase
preparation/__init__.py:from __future__ import annotations
preparation/__init__.py:from .axis_preparation import *
preparation/__init__.py:from .coord_preparation import *
preparation/__init__.py:from .hemisphere_preparation import *
preparation/__init__.py:from .tof_preparation import *
preparation/axis_preparation.py:from __future__ import annotations
preparation/axis_preparation.py:import copy
preparation/axis_preparation.py:import functools
preparation/axis_preparation.py:from typing import TYPE_CHECKING, overload
preparation/axis_preparation.py:import numpy as np
preparation/axis_preparation.py:import xarray as xr
preparation/axis_preparation.py:from scipy.ndimage import geometric_transform
preparation/axis_preparation.py:from arpes.provenance import provenance, update_provenance
preparation/axis_preparation.py:from arpes.utilities import lift_dataarray_to_generic
preparation/axis_preparation.py:from arpes.utilities.normalize import normalize_to_spectrum
preparation/axis_preparation.py:    from collections.abc import Callable
preparation/axis_preparation.py:    from numpy.typing import NDArray
preparation/axis_preparation.py:    from arpes._typing import DataType
preparation/coord_preparation.py:from __future__ import annotations
preparation/coord_preparation.py:import collections
preparation/coord_preparation.py:import functools
preparation/coord_preparation.py:import numpy as np
preparation/hemisphere_preparation.py:from __future__ import annotations
preparation/hemisphere_preparation.py:from itertools import pairwise
preparation/hemisphere_preparation.py:import xarray as xr
preparation/hemisphere_preparation.py:from arpes.provenance import update_provenance
preparation/tof_preparation.py:import math
preparation/tof_preparation.py:import numpy as np
preparation/tof_preparation.py:import xarray as xr
preparation/tof_preparation.py:from arpes.provenance import update_provenance
preparation/tof_preparation.py:from .axis_preparation import transform_dataarray_axis
preparation/tof_preparation.py:from typing import TYPE_CHECKING
preparation/tof_preparation.py:    from collections.abc import Callable, Sequence
provenance.py:from __future__ import annotations
provenance.py:import contextlib
provenance.py:import datetime
provenance.py:import functools
provenance.py:import json
provenance.py:import uuid
provenance.py:import warnings
provenance.py:from datetime import UTC
provenance.py:from pathlib import Path
provenance.py:from typing import TYPE_CHECKING, Any
provenance.py:import xarray as xr
provenance.py:from arpes import VERSION
provenance.py:from arpes._typing import DataType, xr_types
provenance.py:    from collections.abc import Callable
provenance.py:    from _typeshed import Incomplete
provenance.py:    from arpes.utilities.jupyter import get_recent_history
provenance.py:    from arpes.utilities.jupyter import get_recent_history
provenance.py:        import arpes.config
provenance.py:    from arpes.utilities.jupyter import get_recent_history
provenance.py:    from arpes.utilities.jupyter import get_recent_history
repair.py:from __future__ import annotations
repair.py:from typing import TYPE_CHECKING
repair.py:    from arpes._typing import DataType
simulation.py:from __future__ import annotations
simulation.py:from dataclasses import dataclass
simulation.py:from typing import TYPE_CHECKING, Any
simulation.py:import numpy as np
simulation.py:import scipy
simulation.py:import scipy.signal as sig
simulation.py:import xarray as xr
simulation.py:from arpes.constants import K_BOLTZMANN_MEV_KELVIN
simulation.py:    from numpy.typing import NDArray
trace.py:from __future__ import annotations
trace.py:import functools
trace.py:import time
trace.py:from dataclasses import dataclass, field
trace.py:from logging import INFO, Formatter, StreamHandler, getLogger
trace.py:from typing import TYPE_CHECKING
trace.py:    from collections.abc import Callable
trace.py:    from _typeshed import Incomplete
utilities/__init__.py:from __future__ import annotations
utilities/__init__.py:import itertools
utilities/__init__.py:from operator import itemgetter
utilities/__init__.py:from typing import TYPE_CHECKING, Any
utilities/__init__.py:from .attrs import diff_attrs
utilities/__init__.py:from .collections import MappableDict, deep_equals, deep_update
utilities/__init__.py:from .combine import concat_along_phi
utilities/__init__.py:from .dict import (
utilities/__init__.py:from .funcutils import Debounce, cycle, group_by, iter_leaves, lift_dataarray_to_generic
utilities/__init__.py:from .normalize import normalize_to_dataset, normalize_to_spectrum
utilities/__init__.py:from .region import REGIONS, DesignatedRegions, normalize_region
utilities/__init__.py:from .xarray import (
utilities/__init__.py:    from collections.abc import Generator
utilities/__init__.py:    import xarray as xr
utilities/attrs.py:from __future__ import annotations
utilities/attrs.py:from typing import TYPE_CHECKING, Any
utilities/attrs.py:import numpy as np
utilities/attrs.py:import pandas as pd
utilities/attrs.py:    from arpes._typing import DataType
utilities/bz.py:from __future__ import annotations
utilities/bz.py:import itertools
utilities/bz.py:import re
utilities/bz.py:from collections import Counter
utilities/bz.py:from typing import TYPE_CHECKING, NamedTuple
utilities/bz.py:import matplotlib.path
utilities/bz.py:import numpy as np
utilities/bz.py:    from collections.abc import Sequence
utilities/bz.py:    from _typeshed import Incomplete
utilities/bz.py:    from numpy.typing import NDArray
utilities/bz.py:    from arpes._typing import DataType
utilities/bz.py:        from ase.dft.kpoints import get_special_points
utilities/bz.py:    from ase.dft.bz import bz_vertices
utilities/bz.py:    from arpes.analysis.mask import raw_poly_to_mask
utilities/bz_spec.py:from __future__ import annotations
utilities/bz_spec.py:import functools
utilities/bz_spec.py:import pathlib
utilities/bz_spec.py:from typing import TYPE_CHECKING, TypedDict
utilities/bz_spec.py:import numpy as np
utilities/bz_spec.py:from .bz import as_2d, hex_cell_2d
utilities/bz_spec.py:    from collections.abc import Callable
utilities/bz_spec.py:    from numpy.typing import NDArray
utilities/bz_spec.py:    from ase.dft.bz import bz_vertices
utilities/collections.py:from __future__ import annotations
utilities/collections.py:from collections.abc import Mapping
utilities/collections.py:from typing import Any
utilities/combine.py:from __future__ import annotations
utilities/combine.py:import xarray as xr
utilities/conversion/__init__.py:from __future__ import annotations
utilities/conversion/__init__.py:from .calibration import DetectorCalibration
utilities/conversion/__init__.py:from .core import convert_to_kspace, slice_along_path
utilities/conversion/__init__.py:from .forward import (
utilities/conversion/__init__.py:from .remap_manipulator import remap_coords_to
utilities/conversion/__init__.py:from .trapezoid import apply_trapezoidal_correction
utilities/conversion/base.py:from __future__ import annotations
utilities/conversion/base.py:from logging import INFO, Formatter, StreamHandler, getLogger
utilities/conversion/base.py:from typing import TYPE_CHECKING
utilities/conversion/base.py:import numpy as np
utilities/conversion/base.py:import xarray as xr
utilities/conversion/base.py:    from _typeshed import Incomplete
utilities/conversion/base.py:    from numpy.typing import NDArray
utilities/conversion/base.py:    from arpes._typing import MOMENTUM
utilities/conversion/base.py:    from .calibration import DetectorCalibration
utilities/conversion/bounds_calculations.py:from __future__ import annotations
utilities/conversion/bounds_calculations.py:import warnings
utilities/conversion/bounds_calculations.py:from typing import TYPE_CHECKING
utilities/conversion/bounds_calculations.py:import numpy as np
utilities/conversion/bounds_calculations.py:from arpes.constants import K_INV_ANGSTROM
utilities/conversion/bounds_calculations.py:    import xarray as xr
utilities/conversion/bounds_calculations.py:    from numpy.typing import NDArray
utilities/conversion/calibration.py:from __future__ import annotations
utilities/conversion/calibration.py:import itertools
utilities/conversion/calibration.py:from typing import TYPE_CHECKING
utilities/conversion/calibration.py:import numpy as np
utilities/conversion/calibration.py:import scipy.interpolate
utilities/conversion/calibration.py:import xarray as xr
utilities/conversion/calibration.py:    from numpy._typing import NDArray
utilities/conversion/core.py:from __future__ import annotations
utilities/conversion/core.py:import collections
utilities/conversion/core.py:import contextlib
utilities/conversion/core.py:import warnings
utilities/conversion/core.py:from collections.abc import Callable, Iterable, Mapping
utilities/conversion/core.py:from itertools import pairwise
utilities/conversion/core.py:from typing import TYPE_CHECKING, Literal
utilities/conversion/core.py:import numpy as np
utilities/conversion/core.py:import xarray as xr
utilities/conversion/core.py:from scipy.interpolate import RegularGridInterpolator
utilities/conversion/core.py:from arpes.provenance import provenance, update_provenance
utilities/conversion/core.py:from arpes.trace import traceable
utilities/conversion/core.py:from arpes.utilities import normalize_to_spectrum
utilities/conversion/core.py:from .fast_interp import Interpolator
utilities/conversion/core.py:from .grids import (
utilities/conversion/core.py:from .kx_ky_conversion import ConvertKp, ConvertKxKy
utilities/conversion/core.py:from .kz_conversion import ConvertKpKz
utilities/conversion/core.py:    from _typeshed import Incomplete
utilities/conversion/core.py:    from numpy.typing import NDArray
utilities/conversion/core.py:    from arpes._typing import MOMENTUM
utilities/conversion/fast_interp.py:from __future__ import annotations
utilities/conversion/fast_interp.py:import math
utilities/conversion/fast_interp.py:from dataclasses import dataclass
utilities/conversion/fast_interp.py:from typing import TYPE_CHECKING
utilities/conversion/fast_interp.py:import numba
utilities/conversion/fast_interp.py:import numpy as np
utilities/conversion/fast_interp.py:    from numpy.typing import NDArray
utilities/conversion/forward.py:from __future__ import annotations
utilities/conversion/forward.py:import warnings
utilities/conversion/forward.py:from typing import TYPE_CHECKING
utilities/conversion/forward.py:import numpy as np
utilities/conversion/forward.py:import xarray as xr
utilities/conversion/forward.py:from arpes.analysis.filters import gaussian_filter_arr
utilities/conversion/forward.py:from arpes.provenance import update_provenance
utilities/conversion/forward.py:from arpes.trace import traceable
utilities/conversion/forward.py:from arpes.utilities import normalize_to_spectrum
utilities/conversion/forward.py:from .bounds_calculations import (
utilities/conversion/forward.py:from .core import convert_to_kspace
utilities/conversion/forward.py:    from collections.abc import Callable, Sequence
utilities/conversion/forward.py:    from numpy.typing import NDArray
utilities/conversion/forward.py:    from arpes._typing import DataType
utilities/conversion/grids.py:from __future__ import annotations
utilities/conversion/grids.py:import itertools
utilities/conversion/grids.py:from typing import Literal
utilities/conversion/kx_ky_conversion.py:from __future__ import annotations
utilities/conversion/kx_ky_conversion.py:import warnings
utilities/conversion/kx_ky_conversion.py:from typing import TYPE_CHECKING
utilities/conversion/kx_ky_conversion.py:import numba
utilities/conversion/kx_ky_conversion.py:import numpy as np
utilities/conversion/kx_ky_conversion.py:from arpes.constants import K_INV_ANGSTROM
utilities/conversion/kx_ky_conversion.py:from .base import K_SPACE_BORDER, MOMENTUM_BREAKPOINTS, CoordinateConverter
utilities/conversion/kx_ky_conversion.py:from .bounds_calculations import calculate_kp_bounds, calculate_kx_ky_bounds
utilities/conversion/kx_ky_conversion.py:from .calibration import DetectorCalibration
utilities/conversion/kx_ky_conversion.py:    from collections.abc import Callable
utilities/conversion/kx_ky_conversion.py:    import xarray as xr
utilities/conversion/kx_ky_conversion.py:    from _typeshed import Incomplete
utilities/conversion/kx_ky_conversion.py:    from numpy.typing import NDArray
utilities/conversion/kx_ky_conversion.py:    from arpes._typing import MOMENTUM
utilities/conversion/kz_conversion.py:from __future__ import annotations
utilities/conversion/kz_conversion.py:import warnings
utilities/conversion/kz_conversion.py:from typing import TYPE_CHECKING
utilities/conversion/kz_conversion.py:import numba
utilities/conversion/kz_conversion.py:import numpy as np
utilities/conversion/kz_conversion.py:from arpes.constants import HV_CONVERSION, K_INV_ANGSTROM
utilities/conversion/kz_conversion.py:from .base import K_SPACE_BORDER, MOMENTUM_BREAKPOINTS, CoordinateConverter
utilities/conversion/kz_conversion.py:from .bounds_calculations import calculate_kp_kz_bounds
utilities/conversion/kz_conversion.py:from .calibration import DetectorCalibration
utilities/conversion/kz_conversion.py:    from collections.abc import Callable
utilities/conversion/kz_conversion.py:    import xarray as xr
utilities/conversion/kz_conversion.py:    from _typeshed import Incomplete
utilities/conversion/kz_conversion.py:    from numpy.typing import NDArray
utilities/conversion/kz_conversion.py:    from arpes._typing import MOMENTUM
utilities/conversion/remap_manipulator.py:from __future__ import annotations
utilities/conversion/remap_manipulator.py:from copy import deepcopy
utilities/conversion/remap_manipulator.py:from typing import TYPE_CHECKING
utilities/conversion/remap_manipulator.py:import numpy as np
utilities/conversion/remap_manipulator.py:    import xarray as xr
utilities/conversion/remap_manipulator.py:    from numpy.typing import NDArray
utilities/conversion/remap_manipulator.py:    from arpes._typing import DataType
utilities/conversion/trapezoid.py:from __future__ import annotations
utilities/conversion/trapezoid.py:import warnings
utilities/conversion/trapezoid.py:from typing import TYPE_CHECKING
utilities/conversion/trapezoid.py:import numba
utilities/conversion/trapezoid.py:import numpy as np
utilities/conversion/trapezoid.py:import xarray as xr
utilities/conversion/trapezoid.py:from arpes.trace import traceable
utilities/conversion/trapezoid.py:from arpes.utilities import normalize_to_spectrum
utilities/conversion/trapezoid.py:from .base import CoordinateConverter
utilities/conversion/trapezoid.py:from .core import convert_coordinates
utilities/conversion/trapezoid.py:    from collections.abc import Callable
utilities/conversion/trapezoid.py:    from _typeshed import Incomplete
utilities/conversion/trapezoid.py:    from numpy.typing import NDArray
utilities/dict.py:from __future__ import annotations
utilities/dict.py:import re
utilities/dict.py:from typing import Any
utilities/dict.py:from .xarray import lift_dataarray_attrs, lift_datavar_attrs
utilities/excepthook.py:from __future__ import annotations
utilities/excepthook.py:import traceback
utilities/excepthook.py:from collections import namedtuple
utilities/funcutils.py:from __future__ import annotations
utilities/funcutils.py:import functools
utilities/funcutils.py:import time
utilities/funcutils.py:from collections import defaultdict
utilities/funcutils.py:from typing import TYPE_CHECKING, Any
utilities/funcutils.py:import xarray as xr
utilities/funcutils.py:    from collections.abc import Callable, Generator, Iterator, Sequence
utilities/funcutils.py:    import numpy as np
utilities/funcutils.py:    from _typeshed import Incomplete
utilities/funcutils.py:    from numpy import ndarray
utilities/funcutils.py:    from numpy._typing import NDArray
utilities/funcutils.py:    from arpes._typing import DataType
utilities/geometry.py:from __future__ import annotations
utilities/geometry.py:from typing import TYPE_CHECKING
utilities/geometry.py:import numpy as np
utilities/geometry.py:from scipy.spatial import ConvexHull
utilities/geometry.py:    from numpy.typing import NDArray
utilities/image.py:from __future__ import annotations
utilities/image.py:import warnings
utilities/image.py:from typing import TYPE_CHECKING
utilities/image.py:import numpy as np
utilities/image.py:import xarray as xr
utilities/image.py:    from pathlib import Path
utilities/image.py:    from numpy.typing import NDArray
utilities/image.py:        import cv2
utilities/image.py:            import imageio
utilities/jupyter.py:from __future__ import annotations
utilities/jupyter.py:import datetime
utilities/jupyter.py:import json
utilities/jupyter.py:import os
utilities/jupyter.py:import urllib.request
utilities/jupyter.py:from datetime import UTC
utilities/jupyter.py:from logging import INFO, Formatter, StreamHandler, getLogger
utilities/jupyter.py:from pathlib import Path
utilities/jupyter.py:from typing import TYPE_CHECKING
utilities/jupyter.py:from tqdm.notebook import tqdm
utilities/jupyter.py:    from collections.abc import Iterable
utilities/jupyter.py:    from _typeshed import Incomplete
utilities/jupyter.py:        import ipykernel
utilities/jupyter.py:        from notebook import notebookapp
utilities/jupyter.py:        from IPython.core.getipython import get_ipython
utilities/jupyter.py:        from IPython.core.interactiveshell import InteractiveShell
utilities/jupyter.py:    import arpes.config
utilities/jupyter.py:        from IPython.core.getipython import get_ipython
utilities/jupyter.py:        from IPython.core.interactiveshell import InteractiveShell
utilities/math.py:from __future__ import annotations
utilities/math.py:import itertools
utilities/math.py:from collections.abc import Callable, Iterable
utilities/math.py:from typing import TYPE_CHECKING
utilities/math.py:import numpy as np
utilities/math.py:import scipy.ndimage.interpolation
utilities/math.py:import xarray as xr
utilities/math.py:from arpes.constants import K_BOLTZMANN_EV_KELVIN
utilities/math.py:    from _typeshed import Incomplete
utilities/math.py:    from numpy.typing import NDArray
utilities/normalize.py:from __future__ import annotations
utilities/normalize.py:from typing import TYPE_CHECKING
utilities/normalize.py:import xarray as xr
utilities/normalize.py:    from arpes._typing import DataType
utilities/normalize.py:    from arpes.io import load_data
utilities/normalize.py:    from arpes.io import load_data
utilities/qt/__init__.py:from __future__ import annotations
utilities/qt/__init__.py:import functools
utilities/qt/__init__.py:from multiprocessing import Process
utilities/qt/__init__.py:from typing import TYPE_CHECKING
utilities/qt/__init__.py:import dill
utilities/qt/__init__.py:import pyqtgraph as pg
utilities/qt/__init__.py:from pyqtgraph import ViewBox
utilities/qt/__init__.py:from arpes._typing import xr_types
utilities/qt/__init__.py:from .app import SimpleApp
utilities/qt/__init__.py:from .data_array_image_view import DataArrayImageView
utilities/qt/__init__.py:from .help_dialogs import BasicHelpDialog
utilities/qt/__init__.py:from .windows import SimpleWindow
utilities/qt/__init__.py:    from collections.abc import Callable, Generator, Iterable
utilities/qt/__init__.py:    from typing import Literal, Self
utilities/qt/__init__.py:    from _typeshed import Incomplete
utilities/qt/__init__.py:    from PySide6.QtWidgets import QApplication
utilities/qt/__init__.py:    from arpes._typing import DataType
utilities/qt/__init__.py:    import sip
utilities/qt/app.py:from __future__ import annotations
utilities/qt/app.py:import sys
utilities/qt/app.py:import weakref
utilities/qt/app.py:from collections import defaultdict
utilities/qt/app.py:from typing import TYPE_CHECKING
utilities/qt/app.py:import matplotlib as mpl
utilities/qt/app.py:import numpy as np
utilities/qt/app.py:import pyqtgraph as pg
utilities/qt/app.py:import xarray as xr
utilities/qt/app.py:from PySide6 import QtWidgets
utilities/qt/app.py:import arpes.config
utilities/qt/app.py:from arpes.utilities.ui import CursorRegion
utilities/qt/app.py:from .data_array_image_view import DataArrayImageView, DataArrayPlot
utilities/qt/app.py:from .utils import PlotOrientation, ReactivePlotRecord
utilities/qt/app.py:    from _typeshed import Incomplete
utilities/qt/app.py:    from matplotlib.colors import Colormap
utilities/qt/app.py:            import pprint
utilities/qt/app.py:            import pyperclip
utilities/qt/app.py:            import pprint
utilities/qt/app.py:        import arpes.config
utilities/qt/app.py:        from . import qt_info
utilities/qt/data_array_image_view.py:from __future__ import annotations
utilities/qt/data_array_image_view.py:from collections.abc import Callable, Sequence, Sized
utilities/qt/data_array_image_view.py:from typing import TYPE_CHECKING
utilities/qt/data_array_image_view.py:import numpy as np
utilities/qt/data_array_image_view.py:import pyqtgraph as pg
utilities/qt/data_array_image_view.py:from scipy import interpolate
utilities/qt/data_array_image_view.py:from .utils import PlotOrientation
utilities/qt/data_array_image_view.py:    from _typeshed import Incomplete
utilities/qt/data_array_image_view.py:    from numpy.typing import NDArray
utilities/qt/data_array_image_view.py:    from arpes._typing import DataType
utilities/qt/help_dialogs.py:from __future__ import annotations
utilities/qt/help_dialogs.py:from typing import TYPE_CHECKING
utilities/qt/help_dialogs.py:from PySide6 import QtCore, QtWidgets
utilities/qt/help_dialogs.py:from arpes.utilities.ui import PRETTY_KEYS, label, vertical
utilities/qt/help_dialogs.py:    from _typeshed import Incomplete
utilities/qt/help_dialogs.py:    from PySide6.QtGui import QKeyEvent
utilities/qt/help_dialogs.py:        from . import qt_info
utilities/qt/utils.py:from __future__ import annotations
utilities/qt/utils.py:import enum
utilities/qt/utils.py:from dataclasses import dataclass
utilities/qt/utils.py:from typing import TYPE_CHECKING
utilities/qt/utils.py:    from PySide6 import QtWidgets
utilities/qt/windows.py:from __future__ import annotations
utilities/qt/windows.py:import sys
utilities/qt/windows.py:from logging import INFO, Formatter, StreamHandler, getLogger
utilities/qt/windows.py:from typing import TYPE_CHECKING
utilities/qt/windows.py:from PySide6 import QtCore, QtGui, QtWidgets
utilities/qt/windows.py:import arpes.config
utilities/qt/windows.py:from arpes.utilities.excepthook import patched_excepthook
utilities/qt/windows.py:from arpes.utilities.ui import KeyBinding
utilities/qt/windows.py:    from weakref import ReferenceType
utilities/qt/windows.py:    from _typeshed import Incomplete
utilities/qt/windows.py:    from PySide6.QtCore import QObject
utilities/qt/windows.py:    from PySide6.QtGui import QCloseEvent, QKeyEvent
utilities/qt/windows.py:    from . import BasicHelpDialog
utilities/region.py:from __future__ import annotations
utilities/region.py:from enum import Enum
utilities/selections.py:from __future__ import annotations
utilities/selections.py:from typing import TYPE_CHECKING
utilities/selections.py:import numpy as np
utilities/selections.py:import xarray as xr
utilities/selections.py:from . import normalize_to_spectrum
utilities/selections.py:from .xarray import unwrap_xarray_dict
utilities/selections.py:    from _typeshed import Incomplete
utilities/selections.py:    from numpy.typing import NDArray
utilities/selections.py:    from arpes._typing import DataType
utilities/string.py:from __future__ import annotations
utilities/transform.py:from __future__ import annotations
utilities/ui.py:from __future__ import annotations
utilities/ui.py:import enum
utilities/ui.py:import functools
utilities/ui.py:from enum import Enum
utilities/ui.py:from logging import INFO, Formatter, StreamHandler, getLogger
utilities/ui.py:from typing import TYPE_CHECKING, NamedTuple
utilities/ui.py:import pyqtgraph as pg
utilities/ui.py:import rx
utilities/ui.py:import rx.operators as ops
utilities/ui.py:from PySide6 import QtCore, QtGui
utilities/ui.py:from PySide6.QtCore import Qt
utilities/ui.py:from PySide6.QtWidgets import (
utilities/ui.py:from .widgets import (
utilities/ui.py:    from collections.abc import Callable, Sequence
utilities/ui.py:    from _typeshed import Incomplete
utilities/ui.py:    from PySide6.QtGui import QKeyEvent
utilities/widgets.py:from __future__ import annotations
utilities/widgets.py:from pathlib import Path
utilities/widgets.py:from typing import TYPE_CHECKING
utilities/widgets.py:from PySide6.QtWidgets import (
utilities/widgets.py:from rx.subject import BehaviorSubject, Subject
utilities/widgets.py:    from _typeshed import Incomplete
utilities/widgets.py:    from PySide6.QtCore.Qt import CheckState
utilities/xarray.py:from __future__ import annotations
utilities/xarray.py:from typing import TYPE_CHECKING, Any
utilities/xarray.py:import xarray as xr
utilities/xarray.py:    from collections.abc import Callable
utilities/xarray.py:    import numpy as np
utilities/xarray.py:    from _typeshed import Incomplete
utilities/xarray.py:    from numpy.typing import NDArray
utilities/xarray.py:    from arpes._typing import DataType
widgets.py:from __future__ import annotations
widgets.py:import itertools
widgets.py:import pathlib
widgets.py:import warnings
widgets.py:from collections.abc import Sequence
widgets.py:from functools import wraps
widgets.py:from logging import INFO, Formatter, StreamHandler, getLogger
widgets.py:from typing import TYPE_CHECKING, Any, TypeAlias
widgets.py:import matplotlib as mpl
widgets.py:import matplotlib.pyplot as plt
widgets.py:import numpy as np
widgets.py:import xarray as xr
widgets.py:from matplotlib import gridspec
widgets.py:from matplotlib.axes import Axes
widgets.py:from matplotlib.path import Path
widgets.py:from matplotlib.widgets import (
widgets.py:import arpes.config
widgets.py:from arpes.fits import LorentzianModel, broadcast_model
widgets.py:from arpes.plotting.utils import fancy_labels, imshow_arr, invisible_axes
widgets.py:from arpes.utilities import normalize_to_spectrum
widgets.py:from arpes.utilities.conversion import convert_to_kspace
widgets.py:from arpes.utilities.image import imread_to_xarray
widgets.py:    from collections.abc import Callable
widgets.py:    from _typeshed import Incomplete
widgets.py:    from matplotlib.backend_bases import MouseEvent
widgets.py:    from matplotlib.collections import Collection
widgets.py:    from numpy.typing import NDArray
widgets.py:    from arpes._typing import CURRENTCONTEXT, MOMENTUM, DataType
widgets.py:    from arpes.matplotlib.colormaps import Colormap
widgets.py:        from IPython.core.getipython import get_ipython
widgets.py:        from IPython.core.interactiveshell import InteractiveShell
widgets.py:        import pprint
widgets.py:        import pyperclip
widgets.py:            import pprint
widgets.py:            import pyperclip
widgets.py:            import pprint
workflow.py:A core feature of this module is that you can export and import data from between notebooks.
workflow.py:import subprocess
workflow.py:import sys
workflow.py:from collections import defaultdict
workflow.py:from functools import wraps
workflow.py:from pathlib import Path
workflow.py:from pprint import pprint
workflow.py:from typing import TYPE_CHECKING, Any
workflow.py:from logging import INFO, Formatter, StreamHandler, getLogger
workflow.py:import dill
workflow.py:from arpes.config import WorkspaceManager
workflow.py:from arpes.plotting.utils import path_for_plot
workflow.py:from arpes.utilities.jupyter import get_notebook_name
workflow.py:    from collections.abc import Callable
workflow.py:    from _typeshed import Incomplete
workflow.py:    from arpes._typing import WORKSPACETYPE
workflow.py:            import arpes.config
workflow.py:    from arpes.config import CONFIG
xarray_extensions.py:from __future__ import annotations
xarray_extensions.py:import collections
xarray_extensions.py:import contextlib
xarray_extensions.py:import copy
xarray_extensions.py:import itertools
xarray_extensions.py:import warnings
xarray_extensions.py:from collections import OrderedDict
xarray_extensions.py:from collections.abc import Sequence
xarray_extensions.py:from logging import INFO, Formatter, StreamHandler, getLogger
xarray_extensions.py:from typing import TYPE_CHECKING, Any, Literal, Self, TypeAlias, Unpack
xarray_extensions.py:import lmfit
xarray_extensions.py:import matplotlib.pyplot as plt
xarray_extensions.py:import numpy as np
xarray_extensions.py:import xarray as xr
xarray_extensions.py:from scipy import ndimage as ndi
xarray_extensions.py:import arpes
xarray_extensions.py:import arpes.constants
xarray_extensions.py:import arpes.utilities.math
xarray_extensions.py:from arpes.analysis import param_getter, param_stderr_getter, rebin
xarray_extensions.py:from arpes.models.band import MultifitBand
xarray_extensions.py:from arpes.plotting.dispersion import (
xarray_extensions.py:from arpes.plotting.fermi_edge import fermi_edge_reference
xarray_extensions.py:from arpes.plotting.movie import plot_movie
xarray_extensions.py:from arpes.plotting.parameter import plot_parameter
xarray_extensions.py:from arpes.plotting.spatial import reference_scan_spatial
xarray_extensions.py:from arpes.plotting.spin import spin_polarized_spectrum
xarray_extensions.py:from arpes.plotting.utils import fancy_labels, remove_colorbars
xarray_extensions.py:from arpes.utilities import apply_dataarray
xarray_extensions.py:from arpes.utilities.collections import MappableDict
xarray_extensions.py:from arpes.utilities.conversion.core import slice_along_path
xarray_extensions.py:from arpes.utilities.region import DesignatedRegions, normalize_region
xarray_extensions.py:from arpes.utilities.xarray import unwrap_xarray_dict, unwrap_xarray_item
xarray_extensions.py:    from collections.abc import Callable, Generator, Hashable
xarray_extensions.py:    from pathlib import Path
xarray_extensions.py:    import pandas as pd
xarray_extensions.py:    from _typeshed import Incomplete
xarray_extensions.py:    from matplotlib import animation
xarray_extensions.py:    from matplotlib.axes import Axes
xarray_extensions.py:    from matplotlib.colors import Normalize
xarray_extensions.py:    from matplotlib.figure import Figure
xarray_extensions.py:    from matplotlib.typing import RGBColorType
xarray_extensions.py:    from numpy.typing import DTypeLike, NDArray
xarray_extensions.py:    from arpes._typing import ANGLE, SPECTROMETER, DataType, PColorMeshKwargs
xarray_extensions.py:        from skimage import feature
xarray_extensions.py:            from skimage import feature
xarray_extensions.py:        import arpes.plotting.qt_tool
xarray_extensions.py:        from arpes.plotting.curvature_tool import CurvatureTool
xarray_extensions.py:        from arpes.plotting.band_tool import BandTool
xarray_extensions.py:        from arpes.plotting.fit_tool import fit_tool
xarray_extensions.py:        from arpes.plotting.fit_tool import fit_tool
